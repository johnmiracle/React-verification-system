{"ast":null,"code":"import Axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport { USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS, USER_SIGNIN_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_VERIFY_REQUEST, USER_VERIFY_SUCCESS, USER_VERIFY_FAIL } from \"../constants/userConstants\";\n\nconst signin = (phone, password) => async dispatch => {\n  dispatch({\n    type: USER_SIGNIN_REQUEST,\n    payload: {\n      phone,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/login\", {\n      phone,\n      password\n    });\n    dispatch({\n      type: USER_SIGNIN_SUCCESS,\n      payload: data\n    });\n    Cookies.set(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_SIGNIN_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst register = (firstName, lastName, email, phone, password) => async (dispatch) => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      firstName,\n      lastName,\n      email,\n      phone,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/register\", {\n      firstName,\n      lastName,\n      phone,\n      password\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    Cookies.set(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst verify = code => async dispatch => {\n  dispatch({\n    type: USER_VERIFY_REQUEST,\n    payload: {\n      code\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/login\", {\n      code\n    });\n    dispatch({\n      type: USER_VERIFY_SUCCESS,\n      payload: data\n    });\n    Cookies.set(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_VERIFY_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { signin, register, verify };","map":{"version":3,"sources":["/Users/apple/Downloads/React-QR-Generator-Scanner-master/client/src/actions/userActions.js"],"names":["Axios","Cookies","USER_SIGNIN_REQUEST","USER_SIGNIN_SUCCESS","USER_SIGNIN_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_VERIFY_REQUEST","USER_VERIFY_SUCCESS","USER_VERIFY_FAIL","signin","phone","password","dispatch","type","payload","data","post","set","JSON","stringify","error","message","register","firstName","lastName","email","verify","code"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\r\nimport Cookies from \"js-cookie\";\r\nimport {\r\n  USER_SIGNIN_REQUEST,\r\n  USER_SIGNIN_SUCCESS,\r\n  USER_SIGNIN_FAIL,\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n  USER_REGISTER_FAIL,\r\n  USER_VERIFY_REQUEST,\r\n  USER_VERIFY_SUCCESS,\r\n  USER_VERIFY_FAIL,\r\n} from \"../constants/userConstants\";\r\n\r\nconst signin = (phone, password) => async (dispatch) => {\r\n  dispatch({ type: USER_SIGNIN_REQUEST, payload: { phone, password } });\r\n  try {\r\n    const { data } = await Axios.post(\"/api/login\", { phone, password });\r\n    dispatch({ type: USER_SIGNIN_SUCCESS, payload: data });\r\n    Cookies.set(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({ type: USER_SIGNIN_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\nconst register = (firstName, lastName, email, phone, password) => async (\r\n  dispatch\r\n) => {\r\n  dispatch({\r\n    type: USER_REGISTER_REQUEST,\r\n    payload: { firstName, lastName, email, phone, password },\r\n  });\r\n  try {\r\n    const { data } = await Axios.post(\"/api/register\", {\r\n      firstName, lastName,\r\n      phone,\r\n      password,\r\n    });\r\n    dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\r\n    Cookies.set(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({ type: USER_REGISTER_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\nconst verify = (code) => async (dispatch) => {\r\n  dispatch({ type: USER_VERIFY_REQUEST, payload: { code} });\r\n  try {\r\n    const { data } = await Axios.post(\"/api/login\", { code });\r\n    dispatch({ type: USER_VERIFY_SUCCESS, payload: data });\r\n    Cookies.set(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({ type: USER_VERIFY_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\nexport { signin, register, verify };\r\n"]},"metadata":{},"sourceType":"module"}