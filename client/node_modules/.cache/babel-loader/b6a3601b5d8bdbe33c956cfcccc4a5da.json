{"ast":null,"code":"var _require = require('./errors'),\n    NoVideoInputDevicesError = _require.NoVideoInputDevicesError;\n\nfunction defaultDeviceIdChooser(filteredDevices, videoDevices) {\n  return filteredDevices.length > 0 ? filteredDevices[0].deviceId // No device found with the pattern thus use another video device\n  : videoDevices[0].deviceId;\n}\n\nfunction getDeviceId(facingMode) {\n  var chooseDeviceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDeviceIdChooser; // Get manual deviceId from available devices.\n\n  return new Promise(function (resolve, reject) {\n    var enumerateDevices;\n\n    try {\n      enumerateDevices = navigator.mediaDevices.enumerateDevices();\n    } catch (err) {\n      reject(new NoVideoInputDevicesError());\n    }\n\n    enumerateDevices.then(function (devices) {\n      // Filter out non-videoinputs\n      var videoDevices = devices.filter(function (device) {\n        return device.kind == 'videoinput';\n      });\n\n      if (videoDevices.length < 1) {\n        reject(new NoVideoInputDevicesError());\n        return;\n      } else if (videoDevices.length == 1) {\n        // Only 1 video device available thus stop here\n        resolve(videoDevices[0].deviceId);\n        return;\n      }\n\n      var pattern = facingMode == 'rear' ? /rear|back|environment/ig : /front|user|face/ig; // Filter out video devices without the pattern\n\n      var filteredDevices = videoDevices.filter(function (_ref) {\n        var label = _ref.label;\n        return pattern.test(label);\n      });\n      resolve(chooseDeviceId(filteredDevices, videoDevices));\n    });\n  });\n}\n\nexport default getDeviceId;","map":{"version":3,"sources":["/Users/apple/Downloads/React-verification-system/client/node_modules/react-qr-scanner/lib/getDeviceId.js"],"names":["_require","require","NoVideoInputDevicesError","defaultDeviceIdChooser","filteredDevices","videoDevices","length","deviceId","getDeviceId","facingMode","chooseDeviceId","arguments","undefined","Promise","resolve","reject","enumerateDevices","navigator","mediaDevices","err","then","devices","filter","device","kind","pattern","_ref","label","test"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;AAAA,IACIC,wBAAwB,GAAGF,QAAQ,CAACE,wBADxC;;AAGA,SAASC,sBAAT,CAAgCC,eAAhC,EAAiDC,YAAjD,EAA+D;AAC7D,SAAOD,eAAe,CAACE,MAAhB,GAAyB,CAAzB,GAA6BF,eAAe,CAAC,CAAD,CAAf,CAAmBG,QAAhD,CAAyD;AAAzD,IACLF,YAAY,CAAC,CAAD,CAAZ,CAAgBE,QADlB;AAED;;AAED,SAASC,WAAT,CAAqBC,UAArB,EAAiC;AAC/B,MAAIC,cAAc,GAAGC,SAAS,CAACL,MAAV,GAAmB,CAAnB,IAAwBK,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoER,sBAAzF,CAD+B,CAE/B;;AACA,SAAO,IAAIU,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5C,QAAIC,gBAAJ;;AAEA,QAAI;AACFA,MAAAA,gBAAgB,GAAGC,SAAS,CAACC,YAAV,CAAuBF,gBAAvB,EAAnB;AACD,KAFD,CAEE,OAAOG,GAAP,EAAY;AACZJ,MAAAA,MAAM,CAAC,IAAIb,wBAAJ,EAAD,CAAN;AACD;;AAEDc,IAAAA,gBAAgB,CAACI,IAAjB,CAAsB,UAAUC,OAAV,EAAmB;AACvC;AACA,UAAIhB,YAAY,GAAGgB,OAAO,CAACC,MAAR,CAAe,UAAUC,MAAV,EAAkB;AAClD,eAAOA,MAAM,CAACC,IAAP,IAAe,YAAtB;AACD,OAFkB,CAAnB;;AAIA,UAAInB,YAAY,CAACC,MAAb,GAAsB,CAA1B,EAA6B;AAC3BS,QAAAA,MAAM,CAAC,IAAIb,wBAAJ,EAAD,CAAN;AACA;AACD,OAHD,MAGO,IAAIG,YAAY,CAACC,MAAb,IAAuB,CAA3B,EAA8B;AACnC;AACAQ,QAAAA,OAAO,CAACT,YAAY,CAAC,CAAD,CAAZ,CAAgBE,QAAjB,CAAP;AACA;AACD;;AAED,UAAIkB,OAAO,GAAGhB,UAAU,IAAI,MAAd,GAAuB,yBAAvB,GAAmD,mBAAjE,CAfuC,CAe+C;;AAEtF,UAAIL,eAAe,GAAGC,YAAY,CAACiB,MAAb,CAAoB,UAAUI,IAAV,EAAgB;AACxD,YAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AACA,eAAOF,OAAO,CAACG,IAAR,CAAaD,KAAb,CAAP;AACD,OAHqB,CAAtB;AAIAb,MAAAA,OAAO,CAACJ,cAAc,CAACN,eAAD,EAAkBC,YAAlB,CAAf,CAAP;AACD,KAtBD;AAuBD,GAhCM,CAAP;AAiCD;;AAED,eAAeG,WAAf","sourcesContent":["var _require = require('./errors'),\n    NoVideoInputDevicesError = _require.NoVideoInputDevicesError;\n\nfunction defaultDeviceIdChooser(filteredDevices, videoDevices) {\n  return filteredDevices.length > 0 ? filteredDevices[0].deviceId // No device found with the pattern thus use another video device\n  : videoDevices[0].deviceId;\n}\n\nfunction getDeviceId(facingMode) {\n  var chooseDeviceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDeviceIdChooser;\n  // Get manual deviceId from available devices.\n  return new Promise(function (resolve, reject) {\n    var enumerateDevices;\n\n    try {\n      enumerateDevices = navigator.mediaDevices.enumerateDevices();\n    } catch (err) {\n      reject(new NoVideoInputDevicesError());\n    }\n\n    enumerateDevices.then(function (devices) {\n      // Filter out non-videoinputs\n      var videoDevices = devices.filter(function (device) {\n        return device.kind == 'videoinput';\n      });\n\n      if (videoDevices.length < 1) {\n        reject(new NoVideoInputDevicesError());\n        return;\n      } else if (videoDevices.length == 1) {\n        // Only 1 video device available thus stop here\n        resolve(videoDevices[0].deviceId);\n        return;\n      }\n\n      var pattern = facingMode == 'rear' ? /rear|back|environment/ig : /front|user|face/ig; // Filter out video devices without the pattern\n\n      var filteredDevices = videoDevices.filter(function (_ref) {\n        var label = _ref.label;\n        return pattern.test(label);\n      });\n      resolve(chooseDeviceId(filteredDevices, videoDevices));\n    });\n  });\n}\n\nexport default getDeviceId;"]},"metadata":{},"sourceType":"module"}