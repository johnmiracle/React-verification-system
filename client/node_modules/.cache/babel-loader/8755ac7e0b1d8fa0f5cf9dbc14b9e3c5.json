{"ast":null,"code":"/** @format */\nconst version = 'FarmSured-1';\nconst urlsToCache = ['/', 'index.html', 'offline.html'];\nconst self = this; // Install SW\n// self.addEventListener('install', (event) => {\n// \tevent.waitUntil(\n// \t\tcaches.open(CACHE_NAME).then((caches) => {\n// \t\t\tconsole.log('Opened cache');\n// \t\t\treturn caches.addAll(urlsToCache);\n// \t\t})\n// \t);\n// });\n\nself.addEventListener('install', function (event) {\n  console.log('WORKER: install event in progress.');\n  event.waitUntil(caches.open(version + 'fundamentals').then(function (cache) {\n    return cache.addAll(urlsToCache);\n  }).then(function () {\n    console.log('WORKER: install completed');\n  }));\n}); //Listen for requests\n// self.addEventListener('fetch', (event) => {\n// \tevent.respondWith(\n// \t\tcaches.match(event.request).then(() => {\n// \t\t\treturn fetch(event.request).catch(() => caches.match('offline.html'));\n// \t\t})\n// \t);\n// });\n\nself.addEventListener('fetch', function (event) {\n  console.log('WORKER: fetch event in progress.');\n\n  if (event.request.method !== 'GET') {\n    console.log('WORKER: fetch event ignored.', event.request.method, event.request.url);\n    return;\n  }\n\n  event.respondWith(caches.match(event.request).then(function (cached) {\n    var networked = fetch(event.request) // We handle the network request with success and failure scenarios.\n    .then(fetchedFromNetwork, unableToResolve) // We should catch errors on the fetchedFromNetwork handler as well.\n    .catch(unableToResolve);\n    console.log('WORKER: fetch event', cached ? '(cached)' : '(network)', event.request.url);\n    return cached || networked;\n\n    function fetchedFromNetwork(response) {\n      var cacheCopy = response.clone();\n      console.log('WORKER: fetch response from network.', event.request.url);\n      caches // We open a cache to store the response for this request.\n      .open(version + 'pages').then(function add(cache) {\n        cache.put(event.request, cacheCopy);\n      }).then(function () {\n        console.log('WORKER: fetch response stored in cache.', event.request.url);\n      }); // Return the response so that the promise is settled in fulfillment.\n\n      return response;\n    }\n\n    function unableToResolve() {\n      console.log('WORKER: fetch request failed in both cache and network.');\n      return fetch(event.request).catch(() => caches.match('offline.html'));\n    }\n  }));\n}); // Activiate the SW\n// self.addEventListener('activiate', (event) => {\n// \tconst cacheWhiteList = [];\n// \tcacheWhiteList.push(CACHE_NAME);\n// \tevent.waitUntil(\n// \t\tcaches.keys().theh((cacheNames) =>\n// \t\t\tPromise.all(\n// \t\t\t\tcacheNames.map((cacheName) => {\n// \t\t\t\t\tif (!cacheWhiteList.includes(cacheName)) {\n// \t\t\t\t\t\treturn caches.delete(cacheName);\n// \t\t\t\t\t}\n// \t\t\t\t})\n// \t\t\t)\n// \t\t)\n// \t);\n// });\n\nself.addEventListener('activate', function (event) {\n  console.log('WORKER: activate event in progress.');\n  event.waitUntil(caches.keys().then(function (keys) {\n    // We return a promise that settles when all outdated caches are deleted.\n    return Promise.all(keys.filter(function (key) {\n      // Filter by keys that don't start with the latest version prefix.\n      return !key.startsWith(version);\n    }).map(function (key) {\n      return caches.delete(key);\n    }));\n  }).then(function () {\n    console.log('WORKER: activate completed.');\n  }));\n});\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = './serviceworker.js';\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the old content will have been purged and\n            // the fresh content will have been added to the cache.\n            // It's the perfect time to display a \"New content is\n            // available; please refresh.\" message in your web app.\n            console.log('New content is available; please refresh.');\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.');\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}","map":{"version":3,"sources":["/Users/apple/Downloads/React-verification-system/client/src/serviceworker.js"],"names":["version","urlsToCache","self","addEventListener","event","console","log","waitUntil","caches","open","then","cache","addAll","request","method","url","respondWith","match","cached","networked","fetch","fetchedFromNetwork","unableToResolve","catch","response","cacheCopy","clone","add","put","keys","Promise","all","filter","key","startsWith","map","delete","register","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","window","location","origin","swUrl","isLocalhost","registerValidSW","checkValidServiceWorker","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","error","status","headers","get","indexOf","ready","unregister","reload"],"mappings":"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","sourcesContent":["/** @format */\n\nconst version = 'FarmSured-1';\nconst urlsToCache = ['/', 'index.html', 'offline.html'];\n\nconst self = this;\n\n// Install SW\n// self.addEventListener('install', (event) => {\n// \tevent.waitUntil(\n// \t\tcaches.open(CACHE_NAME).then((caches) => {\n// \t\t\tconsole.log('Opened cache');\n// \t\t\treturn caches.addAll(urlsToCache);\n// \t\t})\n// \t);\n// });\nself.addEventListener('install', function (event) {\n\tconsole.log('WORKER: install event in progress.');\n\tevent.waitUntil(\n\t\tcaches\n\t\t\t.open(version + 'fundamentals')\n\t\t\t.then(function (cache) {\n\t\t\t\treturn cache.addAll(urlsToCache);\n\t\t\t})\n\t\t\t.then(function () {\n\t\t\t\tconsole.log('WORKER: install completed');\n\t\t\t})\n\t);\n});\n\n//Listen for requests\n// self.addEventListener('fetch', (event) => {\n// \tevent.respondWith(\n// \t\tcaches.match(event.request).then(() => {\n// \t\t\treturn fetch(event.request).catch(() => caches.match('offline.html'));\n// \t\t})\n// \t);\n// });\nself.addEventListener('fetch', function (event) {\n\tconsole.log('WORKER: fetch event in progress.');\n\tif (event.request.method !== 'GET') {\n\t\tconsole.log('WORKER: fetch event ignored.', event.request.method, event.request.url);\n\t\treturn;\n\t}\n\n\tevent.respondWith(\n\t\tcaches.match(event.request).then(function (cached) {\n\t\t\tvar networked = fetch(event.request)\n\t\t\t\t// We handle the network request with success and failure scenarios.\n\t\t\t\t.then(fetchedFromNetwork, unableToResolve)\n\t\t\t\t// We should catch errors on the fetchedFromNetwork handler as well.\n\t\t\t\t.catch(unableToResolve);\n\t\t\tconsole.log('WORKER: fetch event', cached ? '(cached)' : '(network)', event.request.url);\n\t\t\treturn cached || networked;\n\n\t\t\tfunction fetchedFromNetwork(response) {\n\t\t\t\tvar cacheCopy = response.clone();\n\n\t\t\t\tconsole.log('WORKER: fetch response from network.', event.request.url);\n\t\t\t\tcaches\n\t\t\t\t\t// We open a cache to store the response for this request.\n\t\t\t\t\t.open(version + 'pages')\n\t\t\t\t\t.then(function add(cache) {\n\t\t\t\t\t\tcache.put(event.request, cacheCopy);\n\t\t\t\t\t})\n\t\t\t\t\t.then(function () {\n\t\t\t\t\t\tconsole.log('WORKER: fetch response stored in cache.', event.request.url);\n\t\t\t\t\t});\n\n\t\t\t\t// Return the response so that the promise is settled in fulfillment.\n\t\t\t\treturn response;\n\t\t\t}\n\t\t\tfunction unableToResolve() {\n\t\t\t\tconsole.log('WORKER: fetch request failed in both cache and network.');\n\t\t\t\treturn fetch(event.request).catch(() => caches.match('offline.html'))\n\t\t\t}\n\t\t})\n\t);\n});\n\n// Activiate the SW\n// self.addEventListener('activiate', (event) => {\n// \tconst cacheWhiteList = [];\n// \tcacheWhiteList.push(CACHE_NAME);\n\n// \tevent.waitUntil(\n// \t\tcaches.keys().theh((cacheNames) =>\n// \t\t\tPromise.all(\n// \t\t\t\tcacheNames.map((cacheName) => {\n// \t\t\t\t\tif (!cacheWhiteList.includes(cacheName)) {\n// \t\t\t\t\t\treturn caches.delete(cacheName);\n// \t\t\t\t\t}\n// \t\t\t\t})\n// \t\t\t)\n// \t\t)\n// \t);\n// });\n\nself.addEventListener('activate', function (event) {\n\tconsole.log('WORKER: activate event in progress.');\n\tevent.waitUntil(\n\t\tcaches\n\t\t\t.keys()\n\t\t\t.then(function (keys) {\n\t\t\t\t// We return a promise that settles when all outdated caches are deleted.\n\t\t\t\treturn Promise.all(\n\t\t\t\t\tkeys\n\t\t\t\t\t\t.filter(function (key) {\n\t\t\t\t\t\t\t// Filter by keys that don't start with the latest version prefix.\n\t\t\t\t\t\t\treturn !key.startsWith(version);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.map(function (key) {\n\t\t\t\t\t\t\treturn caches.delete(key);\n\t\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t})\n\t\t\t.then(function () {\n\t\t\t\tconsole.log('WORKER: activate completed.');\n\t\t\t})\n\t);\n});\n\nexport default function register() {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = './serviceworker.js';\n\n\t\t\tif (!isLocalhost) {\n\t\t\t\t// Is not local host. Just register service worker\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t} else {\n\t\t\t\t// This is running on localhost. Lets check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the old content will have been purged and\n\t\t\t\t\t\t\t// the fresh content will have been added to the cache.\n\t\t\t\t\t\t\t// It's the perfect time to display a \"New content is\n\t\t\t\t\t\t\t// available; please refresh.\" message in your web app.\n\t\t\t\t\t\t\tconsole.log('New content is available; please refresh.');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\tresponse.headers.get('content-type').indexOf('javascript') === -1\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\n\n"]},"metadata":{},"sourceType":"module"}