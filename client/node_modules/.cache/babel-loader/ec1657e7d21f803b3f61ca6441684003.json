{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/apple/Downloads/React-verification-system/client/src/pages/CropImage.js\";\n\n/** @format */\n// /** @format */\n// import React, { useCallback, useEffect, useRef, useState } from 'react';\n// import ReactCrop from 'react-image-crop';\n// import 'react-image-crop/dist/ReactCrop.css';\n// import Dialog from '@material-ui/core/Dialog';\n// import { DialogActions } from '@material-ui/core';\n// // function generateDownload(canvas, crop) {}\n// function CropDemo(canvas) {\n// \tconst [open, setOpen] = useState(false);\n// \tconst [upImg, setUpImg] = useState();\n// \tconst imgRef = useRef(null);\n// \tconst previewCanvasRef = useRef(null);\n// \tconst [crop, setCrop] = useState({ unit: 'px', aspect: 1, maxWidth: 5, maxHeight: 50 });\n// \tconst [completedCrop, setCompletedCrop] = useState(null);\n// \tconst [image64, setImageBase64] = useState('');\n// \tconst onSelectFile = (e) => {\n// \t\tsetOpen(true);\n// \t\tif (e.target.files && e.target.files.length > 0) {\n// \t\t\tconst reader = new FileReader();\n// \t\t\treader.addEventListener('load', () => setUpImg(reader.result), setOpen(true));\n// \t\t\treader.readAsDataURL(e.target.files[0]);\n// \t\t}\n// \t};\n// \tconst onLoad = useCallback((img) => {\n// \t\timgRef.current = img;\n// \t}, []);\n// \tconst handleClose = (e) => {\n// \t\tsetOpen(false);\n// \t};\n// \tuseEffect(() => {\n// \t\tif (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n// \t\t\treturn;\n// \t\t}\n// \t\tconst image = imgRef.current;\n// \t\tconst canvas = previewCanvasRef.current;\n// \t\tconst crop = completedCrop;\n// \t\tconst scaleX = image.naturalWidth / image.width;\n// \t\tconst scaleY = image.naturalHeight / image.height;\n// \t\tconst ctx = canvas.getContext('2d');\n// \t\tconst pixelRatio = window.devicePixelRatio;\n// \t\tcanvas.width = crop.width * pixelRatio;\n// \t\tcanvas.height = crop.height * pixelRatio;\n// \t\tctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n// \t\tctx.imageSmoothingQuality = 'high';\n// \t\tctx.drawImage(\n// \t\t\timage,\n// \t\t\tcrop.x * scaleX,\n// \t\t\tcrop.y * scaleY,\n// \t\t\tcrop.width * scaleX,\n// \t\t\tcrop.height * scaleY,\n// \t\t\t0,\n// \t\t\t0,\n// \t\t\tcrop.width,\n// \t\t\tcrop.height\n// \t\t);\n// \t\tif (completedCrop) {\n// \t\t\t// As Base64 string\n// \t\t\tconst base64Img = setImageBase64(canvas.toDataURL('image/jpeg'));\n// \t\t\tconsole.log(image64);\n// \t\t}\n// \t}, [completedCrop]);\n// \treturn (\n// \t\t<>\n// \t\t\t<input type=\"file\" accept=\"image/*\" onChange={onSelectFile} />\n// \t\t\t{upImg && (\n// \t\t\t\t<Dialog open={open} onClose={handleClose}>\n// \t\t\t\t\t<ReactCrop\n// \t\t\t\t\t\tsrc={upImg}\n// \t\t\t\t\t\tcrop={crop}\n// \t\t\t\t\t\tonImageLoaded={onLoad}\n// \t\t\t\t\t\tonChange={(c) => setCrop(c)}\n// \t\t\t\t\t\tonComplete={(c) => setCompletedCrop(c)}\n// \t\t\t\t\t/>\n// \t\t\t\t\t<DialogActions>\n// \t\t\t\t\t\t<button onClick={handleClose} color=\"primary\">\n// \t\t\t\t\t\t\tCancel\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t\t<button type=\"submit\" color=\"primary\">\n// \t\t\t\t\t\t\tUpload\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</DialogActions>\n// \t\t\t\t</Dialog>\n// \t\t\t)}\n// \t\t\t<div>\n// \t\t\t\t<canvas\n// \t\t\t\t\tref={previewCanvasRef}\n// \t\t\t\t\t// Rounding is important so the canvas width and height matches/is a multiple for sharpness.\n// \t\t\t\t\tstyle={{\n// \t\t\t\t\t\twidth: Math.round(completedCrop?.width ?? 0),\n// \t\t\t\t\t\theight: Math.round(completedCrop?.height ?? 0)\n// \t\t\t\t\t}}\n// \t\t\t\t/>\n// \t\t\t</div>\n// \t\t\t{/* <button\n// \t\t\t\ttype=\"button\"\n// \t\t\t\tdisabled={!completedCrop?.width || !completedCrop?.height}\n// \t\t\t\tonClick={() => generateDownload(previewCanvasRef.current, completedCrop)}\n// \t\t\t\tclassName=\"mb-5\"\n// \t\t\t>\n// \t\t\t\tDownload cropped image\n// \t\t\t</button> */}\n// \t\t</>\n// \t);\n// }\n// export default CropDemo;\nimport React, { Component } from 'react';\nimport ReactCrop, { makeAspectCrop } from 'react-image-crop';\nimport { FlatButton, Dialog } from 'material-ui';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport sample from './sample.png';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      showImageCropper: false,\n      selectedImageURL: sample,\n      crop: {\n        x: 0,\n        y: 0 // aspect: 16 / 9,\n\n      },\n      selectedFile: null,\n      croppedImage: sample\n    };\n\n    this.onCropComplete = (crop, pixels) => {};\n\n    this.onCropChange = crop => {\n      this.setState({\n        crop\n      });\n    };\n\n    this.handleCancel = () => {\n      this.setState({\n        showImageCropper: false\n      });\n    };\n\n    this.handleCropClose = () => {\n      let {\n        crop\n      } = this.state; // console.log(\"selectedFile\", selectedFile);\n      // console.log(\"crop\",crop);\n\n      const croppedImg = this.getCroppedImg(this.refImageCrop, crop);\n      this.setState({\n        showImageCropper: false,\n        croppedImage: croppedImg\n      });\n    };\n\n    this.handleOpen = () => {\n      this.setState({\n        showImageCropper: true\n      });\n    };\n  }\n\n  showCropImageModal() {\n    const actions = [/*#__PURE__*/_jsxDEV(FlatButton, {\n      label: \"Cancel\",\n      primary: true,\n      onClick: this.handleCancel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(FlatButton, {\n      label: \"Crop\",\n      primary: true,\n      keyboardFocused: true,\n      onClick: this.handleCropClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 4\n    }, this)];\n\n    if (this.state.showImageCropper) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Dialog, {\n          title: \"Crop the image\",\n          actions: actions,\n          modal: true,\n          open: this.state.showImageCropper,\n          autoScrollBodyContent: true,\n          children: /*#__PURE__*/_jsxDEV(ReactCrop, {\n            src: this.state.selectedImageURL,\n            crop: this.state.crop // onImageLoaded={this.onImageLoaded}\n            ,\n            onComplete: this.onCropComplete,\n            onChange: this.onCropChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 5\n      }, this);\n    }\n  }\n\n  getCroppedImg(srcImage, pixelCrop) {\n    /* the parameters: - the image element - the new width - the new height - the x point we start taking pixels - the y point we start taking pixels - the ratio */\n    // Set up canvas for thumbnail\n    // console.log(imgObj);\n    // let img = new Image();\n    // img.src = this.state.selectedImageURL;\n    // let tempCanvas = document.createElement('canvas');\n    // let tnCanvas = tempCanvas;\n    // tnCanvas.width = newWidth;\n    // tnCanvas.height = newHeight;\n    // tnCanvas.getContext('2d').drawImage(img, startX, startY, newWidth, newHeight);\n    // return tnCanvas;\n    let img = new Image();\n    img.src = this.state.selectedImageURL;\n    const targetX = srcImage.width * pixelCrop.x / 100;\n    const targetY = srcImage.height * pixelCrop.y / 100;\n    const targetWidth = srcImage.width * pixelCrop.width / 100;\n    const targetHeight = srcImage.height * pixelCrop.height / 100;\n    const canvas = document.createElement('canvas');\n    canvas.width = targetWidth;\n    canvas.height = targetHeight;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(img, targetX, targetY, targetWidth, targetHeight, 0, 0, targetWidth, targetHeight);\n    return canvas.toDataURL('image/jpeg');\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(MuiThemeProvider, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [this.showCropImageModal(), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: this.state.selectedImageURL,\n          style: {\n            display: 'none'\n          },\n          ref: img => {\n            this.refImageCrop = img;\n          },\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: this.state.croppedImage,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(FlatButton, {\n          label: \"Open popup\",\n          primary: true,\n          onClick: this.handleOpen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/apple/Downloads/React-verification-system/client/src/pages/CropImage.js"],"names":["React","Component","ReactCrop","makeAspectCrop","FlatButton","Dialog","MuiThemeProvider","sample","App","state","showImageCropper","selectedImageURL","crop","x","y","selectedFile","croppedImage","onCropComplete","pixels","onCropChange","setState","handleCancel","handleCropClose","croppedImg","getCroppedImg","refImageCrop","handleOpen","showCropImageModal","actions","srcImage","pixelCrop","img","Image","src","targetX","width","targetY","height","targetWidth","targetHeight","canvas","document","createElement","ctx","getContext","drawImage","toDataURL","render","display"],"mappings":"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","sourcesContent":["/** @format */\n\n// /** @format */\n\n// import React, { useCallback, useEffect, useRef, useState } from 'react';\n// import ReactCrop from 'react-image-crop';\n// import 'react-image-crop/dist/ReactCrop.css';\n// import Dialog from '@material-ui/core/Dialog';\n// import { DialogActions } from '@material-ui/core';\n\n// // function generateDownload(canvas, crop) {}\n\n// function CropDemo(canvas) {\n// \tconst [open, setOpen] = useState(false);\n// \tconst [upImg, setUpImg] = useState();\n// \tconst imgRef = useRef(null);\n// \tconst previewCanvasRef = useRef(null);\n// \tconst [crop, setCrop] = useState({ unit: 'px', aspect: 1, maxWidth: 5, maxHeight: 50 });\n// \tconst [completedCrop, setCompletedCrop] = useState(null);\n// \tconst [image64, setImageBase64] = useState('');\n\n// \tconst onSelectFile = (e) => {\n// \t\tsetOpen(true);\n// \t\tif (e.target.files && e.target.files.length > 0) {\n// \t\t\tconst reader = new FileReader();\n// \t\t\treader.addEventListener('load', () => setUpImg(reader.result), setOpen(true));\n// \t\t\treader.readAsDataURL(e.target.files[0]);\n// \t\t}\n// \t};\n\n// \tconst onLoad = useCallback((img) => {\n// \t\timgRef.current = img;\n// \t}, []);\n\n// \tconst handleClose = (e) => {\n// \t\tsetOpen(false);\n// \t};\n\n// \tuseEffect(() => {\n// \t\tif (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n// \t\t\treturn;\n// \t\t}\n\n// \t\tconst image = imgRef.current;\n// \t\tconst canvas = previewCanvasRef.current;\n// \t\tconst crop = completedCrop;\n\n// \t\tconst scaleX = image.naturalWidth / image.width;\n// \t\tconst scaleY = image.naturalHeight / image.height;\n// \t\tconst ctx = canvas.getContext('2d');\n// \t\tconst pixelRatio = window.devicePixelRatio;\n\n// \t\tcanvas.width = crop.width * pixelRatio;\n// \t\tcanvas.height = crop.height * pixelRatio;\n\n// \t\tctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n// \t\tctx.imageSmoothingQuality = 'high';\n\n// \t\tctx.drawImage(\n// \t\t\timage,\n// \t\t\tcrop.x * scaleX,\n// \t\t\tcrop.y * scaleY,\n// \t\t\tcrop.width * scaleX,\n// \t\t\tcrop.height * scaleY,\n// \t\t\t0,\n// \t\t\t0,\n// \t\t\tcrop.width,\n// \t\t\tcrop.height\n// \t\t);\n// \t\tif (completedCrop) {\n// \t\t\t// As Base64 string\n// \t\t\tconst base64Img = setImageBase64(canvas.toDataURL('image/jpeg'));\n// \t\t\tconsole.log(image64);\n// \t\t}\n// \t}, [completedCrop]);\n\n// \treturn (\n// \t\t<>\n// \t\t\t<input type=\"file\" accept=\"image/*\" onChange={onSelectFile} />\n// \t\t\t{upImg && (\n// \t\t\t\t<Dialog open={open} onClose={handleClose}>\n// \t\t\t\t\t<ReactCrop\n// \t\t\t\t\t\tsrc={upImg}\n// \t\t\t\t\t\tcrop={crop}\n// \t\t\t\t\t\tonImageLoaded={onLoad}\n// \t\t\t\t\t\tonChange={(c) => setCrop(c)}\n// \t\t\t\t\t\tonComplete={(c) => setCompletedCrop(c)}\n// \t\t\t\t\t/>\n// \t\t\t\t\t<DialogActions>\n// \t\t\t\t\t\t<button onClick={handleClose} color=\"primary\">\n// \t\t\t\t\t\t\tCancel\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t\t<button type=\"submit\" color=\"primary\">\n// \t\t\t\t\t\t\tUpload\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</DialogActions>\n// \t\t\t\t</Dialog>\n// \t\t\t)}\n\n// \t\t\t<div>\n// \t\t\t\t<canvas\n// \t\t\t\t\tref={previewCanvasRef}\n// \t\t\t\t\t// Rounding is important so the canvas width and height matches/is a multiple for sharpness.\n// \t\t\t\t\tstyle={{\n// \t\t\t\t\t\twidth: Math.round(completedCrop?.width ?? 0),\n// \t\t\t\t\t\theight: Math.round(completedCrop?.height ?? 0)\n// \t\t\t\t\t}}\n// \t\t\t\t/>\n// \t\t\t</div>\n\n// \t\t\t{/* <button\n// \t\t\t\ttype=\"button\"\n// \t\t\t\tdisabled={!completedCrop?.width || !completedCrop?.height}\n// \t\t\t\tonClick={() => generateDownload(previewCanvasRef.current, completedCrop)}\n// \t\t\t\tclassName=\"mb-5\"\n// \t\t\t>\n// \t\t\t\tDownload cropped image\n// \t\t\t</button> */}\n// \t\t</>\n// \t);\n// }\n\n// export default CropDemo;\n\nimport React, { Component } from 'react';\nimport ReactCrop, { makeAspectCrop } from 'react-image-crop';\nimport { FlatButton, Dialog } from 'material-ui';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport sample from './sample.png';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nclass App extends Component {\n\tstate = {\n\t\tshowImageCropper: false,\n\t\tselectedImageURL: sample,\n\t\tcrop: {\n\t\t\tx: 0,\n\t\t\ty: 0\n\t\t\t// aspect: 16 / 9,\n\t\t},\n\t\tselectedFile: null,\n\t\tcroppedImage: sample\n\t};\n\n\tshowCropImageModal() {\n\t\tconst actions = [\n\t\t\t<FlatButton label=\"Cancel\" primary={true} onClick={this.handleCancel} />,\n\t\t\t<FlatButton label=\"Crop\" primary={true} keyboardFocused={true} onClick={this.handleCropClose} />\n\t\t];\n\n\t\tif (this.state.showImageCropper) {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<Dialog\n\t\t\t\t\t\ttitle=\"Crop the image\"\n\t\t\t\t\t\tactions={actions}\n\t\t\t\t\t\tmodal={true}\n\t\t\t\t\t\topen={this.state.showImageCropper}\n\t\t\t\t\t\tautoScrollBodyContent={true}\n\t\t\t\t\t>\n\t\t\t\t\t\t<ReactCrop\n\t\t\t\t\t\t\tsrc={this.state.selectedImageURL}\n\t\t\t\t\t\t\tcrop={this.state.crop}\n\t\t\t\t\t\t\t// onImageLoaded={this.onImageLoaded}\n\t\t\t\t\t\t\tonComplete={this.onCropComplete}\n\t\t\t\t\t\t\tonChange={this.onCropChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Dialog>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n\n\tonCropComplete = (crop, pixels) => {};\n\n\tonCropChange = (crop) => {\n\t\tthis.setState({ crop });\n\t};\n\n\t// onImageLoaded = (image) => {\n\t//   this.setState({\n\t//     crop: makeAspectCrop({\n\t//       x: 0,\n\t//       y: 0,\n\t//       // aspect: 10 / 4,\n\t//       // width: 50,\n\t//     }, image.naturalWidth / image.naturalHeight),\n\t//     image,\n\t//   });\n\t// }\n\n\thandleCancel = () => {\n\t\tthis.setState({ showImageCropper: false });\n\t};\n\n\thandleCropClose = () => {\n\t\tlet { crop } = this.state;\n\n\t\t// console.log(\"selectedFile\", selectedFile);\n\t\t// console.log(\"crop\",crop);\n\n\t\tconst croppedImg = this.getCroppedImg(this.refImageCrop, crop);\n\t\tthis.setState({ showImageCropper: false, croppedImage: croppedImg });\n\t};\n\n\tgetCroppedImg(srcImage, pixelCrop) {\n\t\t/* the parameters: - the image element - the new width - the new height - the x point we start taking pixels - the y point we start taking pixels - the ratio */\n\t\t// Set up canvas for thumbnail\n\t\t// console.log(imgObj);\n\t\t// let img = new Image();\n\t\t// img.src = this.state.selectedImageURL;\n\t\t// let tempCanvas = document.createElement('canvas');\n\t\t// let tnCanvas = tempCanvas;\n\t\t// tnCanvas.width = newWidth;\n\t\t// tnCanvas.height = newHeight;\n\t\t// tnCanvas.getContext('2d').drawImage(img, startX, startY, newWidth, newHeight);\n\t\t// return tnCanvas;\n\n\t\tlet img = new Image();\n\t\timg.src = this.state.selectedImageURL;\n\t\tconst targetX = (srcImage.width * pixelCrop.x) / 100;\n\t\tconst targetY = (srcImage.height * pixelCrop.y) / 100;\n\t\tconst targetWidth = (srcImage.width * pixelCrop.width) / 100;\n\t\tconst targetHeight = (srcImage.height * pixelCrop.height) / 100;\n\n\t\tconst canvas = document.createElement('canvas');\n\t\tcanvas.width = targetWidth;\n\t\tcanvas.height = targetHeight;\n\t\tconst ctx = canvas.getContext('2d');\n\n\t\tctx.drawImage(img, targetX, targetY, targetWidth, targetHeight, 0, 0, targetWidth, targetHeight);\n\n\t\treturn canvas.toDataURL('image/jpeg');\n\t}\n\n\thandleOpen = () => {\n\t\tthis.setState({ showImageCropper: true });\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<MuiThemeProvider>\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t{this.showCropImageModal()}\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc={this.state.selectedImageURL}\n\t\t\t\t\t\tstyle={{ display: 'none' }}\n\t\t\t\t\t\tref={(img) => {\n\t\t\t\t\t\t\tthis.refImageCrop = img;\n\t\t\t\t\t\t}}\n\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t/>\n\t\t\t\t\t<img src={this.state.croppedImage} alt=\"\" />\n\t\t\t\t\t<FlatButton label=\"Open popup\" primary={true} onClick={this.handleOpen} />\n\t\t\t\t</div>\n\t\t\t</MuiThemeProvider>\n\t\t);\n\t}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}