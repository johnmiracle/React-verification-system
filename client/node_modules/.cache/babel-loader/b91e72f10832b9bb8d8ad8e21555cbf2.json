{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/apple/Downloads/React-verification-system/client/src/pages/CropImage.js\",\n    _s = $RefreshSig$();\n\n/** @format */\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport Dialog from '@material-ui/core/Dialog';\nimport { DialogActions } from '@material-ui/core'; // function generateDownload(canvas, crop) {}\n\nfunction CropDemo(canvas) {\n  _s();\n\n  var _completedCrop$width, _completedCrop$height;\n\n  const [open, setOpen] = useState(false);\n  const [upImg, setUpImg] = useState();\n  const imgRef = useRef(null);\n  const previewCanvasRef = useRef(null);\n  const [crop, setCrop] = useState({\n    unit: '%',\n    width: 30,\n    aspect: 16 / 9\n  });\n  const [completedCrop, setCompletedCrop] = useState(null);\n\n  const onSelectFile = e => {\n    setOpen(true);\n\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () => setUpImg(reader.result), setOpen(true));\n      reader.readAsDataURL(e.target.files[0]);\n      console.log(e.target.files);\n    }\n  };\n\n  const onLoad = useCallback(img => {\n    imgRef.current = img;\n  }, []);\n\n  const handleClose = e => {\n    console.log(e.target.files);\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n      return;\n    }\n\n    const image = imgRef.current;\n    const canvas = previewCanvasRef.current;\n    const crop = completedCrop;\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    const ctx = canvas.getContext('2d');\n    const pixelRatio = window.devicePixelRatio;\n    canvas.width = crop.width * pixelRatio;\n    canvas.height = crop.height * pixelRatio;\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingQuality = 'high';\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height); // As Base64 string\n\n    const base64Img = canvas.toDataURL('image/jpeg');\n  }, [completedCrop]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: onSelectFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 4\n    }, this), upImg && /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(ReactCrop, {\n        src: upImg,\n        crop: crop,\n        onImageLoaded: onLoad,\n        onChange: c => setCrop(c),\n        onComplete: c => setCompletedCrop(c)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleClose,\n          color: \"primary\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          onClick: base64Img,\n          color: \"primary\",\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: previewCanvasRef // Rounding is important so the canvas width and height matches/is a multiple for sharpness.\n        ,\n        style: {\n          width: Math.round((_completedCrop$width = completedCrop === null || completedCrop === void 0 ? void 0 : completedCrop.width) !== null && _completedCrop$width !== void 0 ? _completedCrop$width : 0),\n          height: Math.round((_completedCrop$height = completedCrop === null || completedCrop === void 0 ? void 0 : completedCrop.height) !== null && _completedCrop$height !== void 0 ? _completedCrop$height : 0)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CropDemo, \"fNF0VFbPbAWLi8tzqs+ya0aSx94=\");\n\n_c = CropDemo;\nexport default CropDemo;\n\nvar _c;\n\n$RefreshReg$(_c, \"CropDemo\");","map":{"version":3,"sources":["/Users/apple/Downloads/React-verification-system/client/src/pages/CropImage.js"],"names":["React","useCallback","useEffect","useRef","useState","ReactCrop","Dialog","DialogActions","CropDemo","canvas","open","setOpen","upImg","setUpImg","imgRef","previewCanvasRef","crop","setCrop","unit","width","aspect","completedCrop","setCompletedCrop","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL","console","log","onLoad","img","current","handleClose","image","scaleX","naturalWidth","scaleY","naturalHeight","height","ctx","getContext","pixelRatio","window","devicePixelRatio","setTransform","imageSmoothingQuality","drawImage","x","y","base64Img","toDataURL","c","Math","round"],"mappings":"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","sourcesContent":["/** @format */\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport Dialog from '@material-ui/core/Dialog';\nimport { DialogActions } from '@material-ui/core';\n\n// function generateDownload(canvas, crop) {}\n\nfunction CropDemo(canvas) {\n\tconst [open, setOpen] = useState(false);\n\tconst [upImg, setUpImg] = useState();\n\tconst imgRef = useRef(null);\n\tconst previewCanvasRef = useRef(null);\n\tconst [crop, setCrop] = useState({ unit: '%', width: 30, aspect: 16 / 9 });\n\tconst [completedCrop, setCompletedCrop] = useState(null);\n\n\tconst onSelectFile = (e) => {\n\t\tsetOpen(true);\n\n\t\tif (e.target.files && e.target.files.length > 0) {\n\t\t\tconst reader = new FileReader();\n\t\t\treader.addEventListener('load', () => setUpImg(reader.result), setOpen(true));\n\t\t\treader.readAsDataURL(e.target.files[0]);\n\t\t\tconsole.log(e.target.files);\n\t\t}\n\t};\n\n\tconst onLoad = useCallback((img) => {\n\t\timgRef.current = img;\n\t}, []);\n\n\tconst handleClose = (e) => {\n\t\tconsole.log(e.target.files);\n\t\tsetOpen(false);\n\t};\n\n\tuseEffect(() => {\n\t\tif (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst image = imgRef.current;\n\t\tconst canvas = previewCanvasRef.current;\n\t\tconst crop = completedCrop;\n\n\t\tconst scaleX = image.naturalWidth / image.width;\n\t\tconst scaleY = image.naturalHeight / image.height;\n\t\tconst ctx = canvas.getContext('2d');\n\t\tconst pixelRatio = window.devicePixelRatio;\n\n\t\tcanvas.width = crop.width * pixelRatio;\n\t\tcanvas.height = crop.height * pixelRatio;\n\n\t\tctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n\t\tctx.imageSmoothingQuality = 'high';\n\n\t\tctx.drawImage(\n\t\t\timage,\n\t\t\tcrop.x * scaleX,\n\t\t\tcrop.y * scaleY,\n\t\t\tcrop.width * scaleX,\n\t\t\tcrop.height * scaleY,\n\t\t\t0,\n\t\t\t0,\n\t\t\tcrop.width,\n\t\t\tcrop.height\n\t\t);\n\n\t\t// As Base64 string\n\t\tconst base64Img = canvas.toDataURL('image/jpeg');\n\t}, [completedCrop]);\n\n\treturn (\n\t\t<>\n\t\t\t<input type=\"file\" accept=\"image/*\" onChange={onSelectFile} />\n\t\t\t{upImg && (\n\t\t\t\t<Dialog open={open} onClose={handleClose}>\n\t\t\t\t\t<ReactCrop\n\t\t\t\t\t\tsrc={upImg}\n\t\t\t\t\t\tcrop={crop}\n\t\t\t\t\t\tonImageLoaded={onLoad}\n\t\t\t\t\t\tonChange={(c) => setCrop(c)}\n\t\t\t\t\t\tonComplete={(c) => setCompletedCrop(c)}\n\t\t\t\t\t/>\n\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t<button onClick={handleClose} color=\"primary\">\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button type=\"submit\" onClick={base64Img} color=\"primary\">\n\t\t\t\t\t\t\tUpload\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</DialogActions>\n\t\t\t\t</Dialog>\n\t\t\t)}\n\n\t\t\t<div>\n\t\t\t\t<canvas\n\t\t\t\t\tref={previewCanvasRef}\n\t\t\t\t\t// Rounding is important so the canvas width and height matches/is a multiple for sharpness.\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: Math.round(completedCrop?.width ?? 0),\n\t\t\t\t\t\theight: Math.round(completedCrop?.height ?? 0)\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t{/* <button\n\t\t\t\ttype=\"button\"\n\t\t\t\tdisabled={!completedCrop?.width || !completedCrop?.height}\n\t\t\t\tonClick={() => generateDownload(previewCanvasRef.current, completedCrop)}\n\t\t\t\tclassName=\"mb-5\"\n\t\t\t>\n\t\t\t\tDownload cropped image\n\t\t\t</button> */}\n\t\t</>\n\t);\n}\n\nexport default CropDemo;\n"]},"metadata":{},"sourceType":"module"}