{"ast":null,"code":"/** @format */\nimport axios from 'axios';\nimport { USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS, USER_SIGNIN_FAIL, USER_SIGNOUT, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_HISTORY_REQUEST, USER_HISTORY_SUCCESS, USER_HISTORY_FAIL, USER_ADDFARM_REQUEST, USER_ADDFARM_SUCCESS, USER_ADDFARM_FAIL, USER_FARMS_REQUEST, USER_FARMS_SUCCESS, USER_FARMS_FAIL, USER_FARM_DETAIL_REQUEST, USER_FARM_DETAIL_SUCCESS, USER_FARM_DETAIL_FAIL, USER_ADDFARM_DETAILS_REQUEST, USER_ADDFARM_DETAILS_SUCCESS, USER_ADDFARM_DETAILS_FAIL, USER_LOGS_REQUEST, USER_LOGS_SUCCESS, USER_LOGS_FAIL, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAIL, USER_DETAIL_REQUEST, USER_DETAIL_SUCCESS, USER_DETAIL_FAIL, USER_IMAGEUPLOAD_REQUEST, USER_IMAGEUPLOAD_SUCCESS, USER_IMAGEUPLOAD_FAIL } from '../constants/userConstants';\n\nconst signin = (phone, password) => async dispatch => {\n  dispatch({\n    type: USER_SIGNIN_REQUEST,\n    payload: {\n      phone,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await axios.post('/api/login', {\n      phone,\n      password\n    });\n    dispatch({\n      type: USER_SIGNIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_SIGNIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\nconst logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  localStorage.removeItem('farmInfo');\n  dispatch({\n    type: USER_SIGNOUT\n  });\n};\n\nconst register = (firstName, lastName, phone, password, state, city, cluster) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      firstName,\n      lastName,\n      phone,\n      password,\n      state,\n      city,\n      cluster\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await axios.post('/api/register', {\n      firstName,\n      lastName,\n      phone,\n      password,\n      state,\n      city,\n      cluster\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\nconst saveRegister = (phone, password) => async dispatch => {\n  dispatch({\n    type: USER_SAVE_REGISTER,\n    payload: {\n      phone,\n      password\n    }\n  });\n};\n\nconst newFarm = (farmName, farmSize, farmCapacity) => async (dispatch, getState) => {\n  dispatch({\n    type: USER_ADDFARM_REQUEST,\n    payload: {\n      farmName,\n      farmSize,\n      farmCapacity\n    }\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await axios.post('/api/user/add_farm', {\n      farmName,\n      farmSize,\n      farmCapacity\n    }, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: USER_ADDFARM_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_ADDFARM_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\nconst newFarmDetails = (farmId, farmType, poultryType, numOfStock, farmDays, farmDueDay, numOfDOC, numOfFeed, stockingDate, expectedPoints) => async (dispatch, getState) => {\n  dispatch({\n    type: USER_ADDFARM_DETAILS_REQUEST,\n    payload: {\n      farmId,\n      farmType,\n      poultryType,\n      numOfStock,\n      farmDays,\n      farmDueDay,\n      numOfDOC,\n      numOfFeed,\n      stockingDate,\n      expectedPoints\n    }\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await axios.post('/api/user/add_farm/' + farmId, {\n      farmType,\n      poultryType,\n      numOfStock,\n      farmDays,\n      farmDueDay,\n      numOfDOC,\n      numOfFeed,\n      stockingDate,\n      expectedPoints\n    }, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: USER_ADDFARM_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_ADDFARM_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\nconst listHistoryMine = () => async (dispatch, getState) => {\n  dispatch({\n    type: USER_HISTORY_REQUEST\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await axios.get('/api/user/history', {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: USER_HISTORY_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_HISTORY_FAIL,\n      payload: message\n    });\n  }\n};\n\nconst listAllFarms = () => async (dispatch, getState) => {\n  dispatch({\n    type: USER_FARMS_REQUEST\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await axios.get('/api/user/all-farms', {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: USER_FARMS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_FARMS_FAIL,\n      payload: message\n    });\n  }\n};\n\nconst userFarmDetail = farmId => async (dispatch, getState) => {\n  dispatch({\n    type: USER_FARM_DETAIL_REQUEST,\n    payload: farmId\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await axios.get('/api/user/farm/' + farmId, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: USER_FARM_DETAIL_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_FARM_DETAIL_FAIL,\n      payload: message\n    });\n  }\n};\n\nconst userLog = () => async (dispatch, getState) => {\n  dispatch({\n    type: USER_LOGS_REQUEST\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await axios.get('/api/user/profile', {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: USER_LOGS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_LOGS_FAIL,\n      payload: message\n    });\n  }\n};\n\nconst update = ({\n  userId,\n  firstName,\n  lastName,\n  phone,\n  address,\n  state,\n  city,\n  cluster\n}) => async (dispatch, getState) => {\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n  dispatch({\n    type: USER_UPDATE_REQUEST,\n    payload: {\n      userId,\n      firstName,\n      lastName,\n      phone,\n      address,\n      state,\n      city,\n      cluster\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await axios.post('/api/user/' + userId, {\n      firstName,\n      lastName,\n      phone,\n      address,\n      state,\n      city,\n      cluster\n    }, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: USER_UPDATE_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: message\n    });\n  }\n};\n\nconst detail = () => async (dispatch, getState) => {\n  dispatch({\n    type: USER_DETAIL_REQUEST\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await axios.get('/api/user/detail', {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: USER_DETAIL_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_DETAIL_FAIL,\n      payload: message\n    });\n  }\n};\n\nconst upload = userImg => async (dispatch, getState) => {\n  dispatch({\n    type: USER_IMAGEUPLOAD_REQUEST,\n    payload: userImg\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await axios.post('/api/user/profile_image', userImg, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: USER_IMAGEUPLOAD_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_IMAGEUPLOAD_FAIL,\n      payload: message\n    });\n  }\n};\n\nexport { signin, register, saveRegister, newFarm, newFarmDetails, logout, listHistoryMine, listAllFarms, userFarmDetail, userLog, update, detail, upload };","map":{"version":3,"sources":["/Users/apple/Downloads/React-verification-system/client/src/actions/userActions.js"],"names":["axios","USER_SIGNIN_REQUEST","USER_SIGNIN_SUCCESS","USER_SIGNIN_FAIL","USER_SIGNOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_HISTORY_REQUEST","USER_HISTORY_SUCCESS","USER_HISTORY_FAIL","USER_ADDFARM_REQUEST","USER_ADDFARM_SUCCESS","USER_ADDFARM_FAIL","USER_FARMS_REQUEST","USER_FARMS_SUCCESS","USER_FARMS_FAIL","USER_FARM_DETAIL_REQUEST","USER_FARM_DETAIL_SUCCESS","USER_FARM_DETAIL_FAIL","USER_ADDFARM_DETAILS_REQUEST","USER_ADDFARM_DETAILS_SUCCESS","USER_ADDFARM_DETAILS_FAIL","USER_LOGS_REQUEST","USER_LOGS_SUCCESS","USER_LOGS_FAIL","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","USER_DETAIL_REQUEST","USER_DETAIL_SUCCESS","USER_DETAIL_FAIL","USER_IMAGEUPLOAD_REQUEST","USER_IMAGEUPLOAD_SUCCESS","USER_IMAGEUPLOAD_FAIL","signin","phone","password","dispatch","type","payload","data","post","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","firstName","lastName","state","city","cluster","saveRegister","USER_SAVE_REGISTER","newFarm","farmName","farmSize","farmCapacity","getState","userSignin","userInfo","headers","Authorization","token","newFarmDetails","farmId","farmType","poultryType","numOfStock","farmDays","farmDueDay","numOfDOC","numOfFeed","stockingDate","expectedPoints","listHistoryMine","get","listAllFarms","userFarmDetail","userLog","update","userId","address","detail","upload","userImg"],"mappings":"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","sourcesContent":["/** @format */\r\n\r\nimport axios from 'axios';\r\nimport {\r\n\tUSER_SIGNIN_REQUEST,\r\n\tUSER_SIGNIN_SUCCESS,\r\n\tUSER_SIGNIN_FAIL,\r\n\tUSER_SIGNOUT,\r\n\tUSER_REGISTER_REQUEST,\r\n\tUSER_REGISTER_SUCCESS,\r\n\tUSER_REGISTER_FAIL,\r\n\tUSER_HISTORY_REQUEST,\r\n\tUSER_HISTORY_SUCCESS,\r\n\tUSER_HISTORY_FAIL,\r\n\tUSER_ADDFARM_REQUEST,\r\n\tUSER_ADDFARM_SUCCESS,\r\n\tUSER_ADDFARM_FAIL,\r\n\tUSER_FARMS_REQUEST,\r\n\tUSER_FARMS_SUCCESS,\r\n\tUSER_FARMS_FAIL,\r\n\tUSER_FARM_DETAIL_REQUEST,\r\n\tUSER_FARM_DETAIL_SUCCESS,\r\n\tUSER_FARM_DETAIL_FAIL,\r\n\tUSER_ADDFARM_DETAILS_REQUEST,\r\n\tUSER_ADDFARM_DETAILS_SUCCESS,\r\n\tUSER_ADDFARM_DETAILS_FAIL,\r\n\tUSER_LOGS_REQUEST,\r\n\tUSER_LOGS_SUCCESS,\r\n\tUSER_LOGS_FAIL,\r\n\tUSER_UPDATE_REQUEST,\r\n\tUSER_UPDATE_SUCCESS,\r\n\tUSER_UPDATE_FAIL,\r\n\tUSER_DETAIL_REQUEST,\r\n\tUSER_DETAIL_SUCCESS,\r\n\tUSER_DETAIL_FAIL,\r\n\tUSER_IMAGEUPLOAD_REQUEST,\r\n\tUSER_IMAGEUPLOAD_SUCCESS,\r\n\tUSER_IMAGEUPLOAD_FAIL\r\n} from '../constants/userConstants';\r\n\r\nconst signin = (phone, password) => async (dispatch) => {\r\n\tdispatch({ type: USER_SIGNIN_REQUEST, payload: { phone, password } });\r\n\ttry {\r\n\t\tconst { data } = await axios.post('/api/login', { phone, password });\r\n\t\tdispatch({ type: USER_SIGNIN_SUCCESS, payload: data });\r\n\t\tlocalStorage.setItem('userInfo', JSON.stringify(data));\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_SIGNIN_FAIL,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nconst logout = () => (dispatch) => {\r\n\tlocalStorage.removeItem('userInfo');\r\n\tlocalStorage.removeItem('farmInfo');\r\n\tdispatch({ type: USER_SIGNOUT });\r\n};\r\n\r\nconst register = (firstName, lastName, phone, password, state, city, cluster) => async (dispatch) => {\r\n\tdispatch({\r\n\t\ttype: USER_REGISTER_REQUEST,\r\n\t\tpayload: { firstName, lastName, phone, password, state, city, cluster }\r\n\t});\r\n\ttry {\r\n\t\tconst { data } = await axios.post('/api/register', {\r\n\t\t\tfirstName,\r\n\t\t\tlastName,\r\n\t\t\tphone,\r\n\t\t\tpassword,\r\n\t\t\tstate,\r\n\t\t\tcity,\r\n\t\t\tcluster\r\n\t\t});\r\n\t\tdispatch({ type: USER_REGISTER_SUCCESS, payload: data });\r\n\t\tlocalStorage.setItem('userInfo', JSON.stringify(data));\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_REGISTER_FAIL,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nconst saveRegister = (phone, password) => async (dispatch) => {\r\n\tdispatch({ type: USER_SAVE_REGISTER, payload: { phone, password } });\r\n};\r\n\r\nconst newFarm = (farmName, farmSize, farmCapacity) => async (dispatch, getState) => {\r\n\tdispatch({\r\n\t\ttype: USER_ADDFARM_REQUEST,\r\n\t\tpayload: {\r\n\t\t\tfarmName,\r\n\t\t\tfarmSize,\r\n\t\t\tfarmCapacity\r\n\t\t}\r\n\t});\r\n\tconst {\r\n\t\tuserSignin: { userInfo }\r\n\t} = getState();\r\n\ttry {\r\n\t\tconst { data } = await axios.post(\r\n\t\t\t'/api/user/add_farm',\r\n\t\t\t{\r\n\t\t\t\tfarmName,\r\n\t\t\t\tfarmSize,\r\n\t\t\t\tfarmCapacity\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAuthorization: 'Bearer ' + userInfo.token\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\tdispatch({ type: USER_ADDFARM_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_ADDFARM_FAIL,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nconst newFarmDetails = (\r\n\tfarmId,\r\n\tfarmType,\r\n\tpoultryType,\r\n\tnumOfStock,\r\n\tfarmDays,\r\n\tfarmDueDay,\r\n\tnumOfDOC,\r\n\tnumOfFeed,\r\n\tstockingDate,\r\n\texpectedPoints\r\n) => async (dispatch, getState) => {\r\n\tdispatch({\r\n\t\ttype: USER_ADDFARM_DETAILS_REQUEST,\r\n\t\tpayload: {\r\n\t\t\tfarmId,\r\n\t\t\tfarmType,\r\n\t\t\tpoultryType,\r\n\t\t\tnumOfStock,\r\n\t\t\tfarmDays,\r\n\t\t\tfarmDueDay,\r\n\t\t\tnumOfDOC,\r\n\t\t\tnumOfFeed,\r\n\t\t\tstockingDate,\r\n\t\t\texpectedPoints\r\n\t\t}\r\n\t});\r\n\tconst {\r\n\t\tuserSignin: { userInfo }\r\n\t} = getState();\r\n\ttry {\r\n\t\tconst { data } = await axios.post(\r\n\t\t\t'/api/user/add_farm/' + farmId,\r\n\t\t\t{\r\n\t\t\t\tfarmType,\r\n\t\t\t\tpoultryType,\r\n\t\t\t\tnumOfStock,\r\n\t\t\t\tfarmDays,\r\n\t\t\t\tfarmDueDay,\r\n\t\t\t\tnumOfDOC,\r\n\t\t\t\tnumOfFeed,\r\n\t\t\t\tstockingDate,\r\n\t\t\t\texpectedPoints\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAuthorization: 'Bearer ' + userInfo.token\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\tdispatch({ type: USER_ADDFARM_DETAILS_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_ADDFARM_DETAILS_FAIL,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nconst listHistoryMine = () => async (dispatch, getState) => {\r\n\tdispatch({ type: USER_HISTORY_REQUEST });\r\n\tconst {\r\n\t\tuserSignin: { userInfo }\r\n\t} = getState();\r\n\ttry {\r\n\t\tconst { data } = await axios.get('/api/user/history', {\r\n\t\t\theaders: { Authorization: `Bearer ${userInfo.token}` }\r\n\t\t});\r\n\t\tdispatch({ type: USER_HISTORY_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tconst message =\r\n\t\t\terror.response && error.response.data.message ? error.response.data.message : error.message;\r\n\t\tdispatch({ type: USER_HISTORY_FAIL, payload: message });\r\n\t}\r\n};\r\n\r\nconst listAllFarms = () => async (dispatch, getState) => {\r\n\tdispatch({ type: USER_FARMS_REQUEST });\r\n\tconst {\r\n\t\tuserSignin: { userInfo }\r\n\t} = getState();\r\n\ttry {\r\n\t\tconst { data } = await axios.get('/api/user/all-farms', {\r\n\t\t\theaders: { Authorization: `Bearer ${userInfo.token}` }\r\n\t\t});\r\n\t\tdispatch({ type: USER_FARMS_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tconst message =\r\n\t\t\terror.response && error.response.data.message ? error.response.data.message : error.message;\r\n\t\tdispatch({ type: USER_FARMS_FAIL, payload: message });\r\n\t}\r\n};\r\n\r\nconst userFarmDetail = (farmId) => async (dispatch, getState) => {\r\n\tdispatch({ type: USER_FARM_DETAIL_REQUEST, payload: farmId });\r\n\tconst {\r\n\t\tuserSignin: { userInfo }\r\n\t} = getState();\r\n\ttry {\r\n\t\tconst { data } = await axios.get('/api/user/farm/' + farmId, {\r\n\t\t\theaders: { Authorization: `Bearer ${userInfo.token}` }\r\n\t\t});\r\n\t\tdispatch({ type: USER_FARM_DETAIL_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tconst message =\r\n\t\t\terror.response && error.response.data.message ? error.response.data.message : error.message;\r\n\t\tdispatch({ type: USER_FARM_DETAIL_FAIL, payload: message });\r\n\t}\r\n};\r\n\r\nconst userLog = () => async (dispatch, getState) => {\r\n\tdispatch({ type: USER_LOGS_REQUEST });\r\n\tconst {\r\n\t\tuserSignin: { userInfo }\r\n\t} = getState();\r\n\ttry {\r\n\t\tconst { data } = await axios.get('/api/user/profile', {\r\n\t\t\theaders: { Authorization: `Bearer ${userInfo.token}` }\r\n\t\t});\r\n\t\tdispatch({ type: USER_LOGS_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tconst message =\r\n\t\t\terror.response && error.response.data.message ? error.response.data.message : error.message;\r\n\t\tdispatch({ type: USER_LOGS_FAIL, payload: message });\r\n\t}\r\n};\r\n\r\nconst update = ({ userId, firstName, lastName, phone, address, state, city, cluster }) => async (\r\n\tdispatch,\r\n\tgetState\r\n) => {\r\n\tconst {\r\n\t\tuserSignin: { userInfo }\r\n\t} = getState();\r\n\tdispatch({\r\n\t\ttype: USER_UPDATE_REQUEST,\r\n\t\tpayload: { userId, firstName, lastName, phone, address, state, city, cluster }\r\n\t});\r\n\ttry {\r\n\t\tconst { data } = await axios.post(\r\n\t\t\t'/api/user/' + userId,\r\n\t\t\t{ firstName, lastName, phone, address, state, city, cluster },\r\n\t\t\t{\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAuthorization: 'Bearer ' + userInfo.token\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\tdispatch({ type: USER_UPDATE_SUCCESS, payload: data });\r\n\t\tlocalStorage.setItem('userInfo', JSON.stringify(data));\r\n\t} catch (error) {\r\n\t\tconst message =\r\n\t\t\terror.response && error.response.data.message ? error.response.data.message : error.message;\r\n\t\tdispatch({ type: USER_UPDATE_FAIL, payload: message });\r\n\t}\r\n};\r\n\r\nconst detail = () => async (dispatch, getState) => {\r\n\tdispatch({ type: USER_DETAIL_REQUEST });\r\n\tconst {\r\n\t\tuserSignin: { userInfo }\r\n\t} = getState();\r\n\ttry {\r\n\t\tconst { data } = await axios.get('/api/user/detail', {\r\n\t\t\theaders: { Authorization: `Bearer ${userInfo.token}` }\r\n\t\t});\r\n\t\tdispatch({ type: USER_DETAIL_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tconst message =\r\n\t\t\terror.response && error.response.data.message ? error.response.data.message : error.message;\r\n\t\tdispatch({ type: USER_DETAIL_FAIL, payload: message });\r\n\t}\r\n};\r\n\r\nconst upload = (userImg) => async (dispatch, getState) => {\r\n\tdispatch({ type: USER_IMAGEUPLOAD_REQUEST, payload: userImg });\r\n\tconst {\r\n\t\tuserSignin: { userInfo }\r\n\t} = getState();\r\n\ttry {\r\n\t\tconst { data } = await axios.post('/api/user/profile_image', userImg, {\r\n\t\t\theaders: { Authorization: `Bearer ${userInfo.token}` }\r\n\t\t});\r\n\t\tdispatch({ type: USER_IMAGEUPLOAD_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tconst message =\r\n\t\t\terror.response && error.response.data.message ? error.response.data.message : error.message;\r\n\t\tdispatch({ type: USER_IMAGEUPLOAD_FAIL, payload: message });\r\n\t}\r\n};\r\n\r\nexport {\r\n\tsignin,\r\n\tregister,\r\n\tsaveRegister,\r\n\tnewFarm,\r\n\tnewFarmDetails,\r\n\tlogout,\r\n\tlistHistoryMine,\r\n\tlistAllFarms,\r\n\tuserFarmDetail,\r\n\tuserLog,\r\n\tupdate,\r\n\tdetail,\r\n\tupload\r\n};\r\n"]},"metadata":{},"sourceType":"module"}