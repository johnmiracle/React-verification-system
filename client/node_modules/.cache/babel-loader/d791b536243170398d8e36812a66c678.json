{"ast":null,"code":"import Axios from \"axios\";\nimport { PRODUCT_ADD_REQUEST, PRODUCT_ADD_SUCCESS, PRODUCT_ADD_FAIL, PRODUCT_DOWNLOAD_REQUEST, PRODUCT_DOWNLOAD_SUCCESS, PRODUCT_DOWNLOAD_FAIL } from \"../constants/adminConstants\";\n\nconst addProduct = (productName, batchNumber, serialNumber, point) => async (dispatch, getState) => {\n  dispatch({\n    type: PRODUCT_ADD_REQUEST,\n    payload: {\n      productName,\n      batchNumber,\n      serialNumber,\n      point\n    }\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/admin/code-generator\", {\n      productName,\n      batchNumber,\n      serialNumber,\n      point\n    }, {\n      headers: {\n        Authorization: \"Bearer \" + userInfo.token\n      }\n    });\n    dispatch({\n      type: PRODUCT_ADD_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_ADD_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst productListDownload = () => async (dispatch, getState) => {\n  dispatch({\n    type: PRODUCT_DOWNLOAD_REQUEST\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/admin/code-generator\", {\n      headers: {\n        Authorization: \"Bearer \" + userInfo.token\n      }\n    });\n    dispatch({\n      type: PRODUCT_DOWNLOAD_SUCCESS\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: PRODUCT_DOWNLOAD_FAIL,\n      payload: message\n    });\n  }\n};\n\nexport { addProduct, productListDownload };","map":{"version":3,"sources":["/Users/apple/Downloads/React-verification-system/client/src/actions/adminActions.js"],"names":["Axios","PRODUCT_ADD_REQUEST","PRODUCT_ADD_SUCCESS","PRODUCT_ADD_FAIL","PRODUCT_DOWNLOAD_REQUEST","PRODUCT_DOWNLOAD_SUCCESS","PRODUCT_DOWNLOAD_FAIL","addProduct","productName","batchNumber","serialNumber","point","dispatch","getState","type","payload","userSignin","userInfo","data","post","headers","Authorization","token","error","message","productListDownload","response"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,gBAHF,EAIEC,wBAJF,EAKEC,wBALF,EAMEC,qBANF,QAOO,6BAPP;;AASA,MAAMC,UAAU,GAAG,CAACC,WAAD,EAAcC,WAAd,EAA2BC,YAA3B,EAAyCC,KAAzC,KAAmD,OACpEC,QADoE,EAEpEC,QAFoE,KAGjE;AACHD,EAAAA,QAAQ,CAAC;AACPE,IAAAA,IAAI,EAAEb,mBADC;AAEPc,IAAAA,OAAO,EAAE;AAAEP,MAAAA,WAAF;AAAeC,MAAAA,WAAf;AAA4BC,MAAAA,YAA5B;AAA0CC,MAAAA;AAA1C;AAFF,GAAD,CAAR;AAIA,QAAM;AACJK,IAAAA,UAAU,EAAE;AAAEC,MAAAA;AAAF;AADR,MAEFJ,QAAQ,EAFZ;;AAGA,MAAI;AACF,UAAM;AAAEK,MAAAA;AAAF,QAAW,MAAMlB,KAAK,CAACmB,IAAN,CACrB,2BADqB,EAErB;AAAEX,MAAAA,WAAF;AAAeC,MAAAA,WAAf;AAA4BC,MAAAA,YAA5B;AAA0CC,MAAAA;AAA1C,KAFqB,EAGrB;AACES,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,YAAYJ,QAAQ,CAACK;AAD7B;AADX,KAHqB,CAAvB;AASAV,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEZ,mBAAR;AAA6Ba,MAAAA,OAAO,EAAEG;AAAtC,KAAD,CAAR;AACD,GAXD,CAWE,OAAOK,KAAP,EAAc;AACdX,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEX,gBAAR;AAA0BY,MAAAA,OAAO,EAAEQ,KAAK,CAACC;AAAzC,KAAD,CAAR;AACD;AACF,CAzBD;;AA2BA,MAAMC,mBAAmB,GAAG,MAAM,OAAOb,QAAP,EAAiBC,QAAjB,KAA8B;AAC9DD,EAAAA,QAAQ,CAAC;AACPE,IAAAA,IAAI,EAAEV;AADC,GAAD,CAAR;AAGA,QAAM;AACJY,IAAAA,UAAU,EAAE;AAAEC,MAAAA;AAAF;AADR,MAEFJ,QAAQ,EAFZ;;AAGA,MAAI;AACF,UAAM;AAAEK,MAAAA;AAAF,QAAW,MAAMlB,KAAK,CAACmB,IAAN,CAAW,2BAAX,EAAwC;AAC7DC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,YAAYJ,QAAQ,CAACK;AAD7B;AADoD,KAAxC,CAAvB;AAKAV,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAET;AAAR,KAAD,CAAR;AACD,GAPD,CAOE,OAAOkB,KAAP,EAAc;AACd,UAAMC,OAAO,GACXD,KAAK,CAACG,QAAN,IAAkBH,KAAK,CAACG,QAAN,CAAeR,IAAf,CAAoBM,OAAtC,GACID,KAAK,CAACG,QAAN,CAAeR,IAAf,CAAoBM,OADxB,GAEID,KAAK,CAACC,OAHZ;AAIAZ,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAER,qBAAR;AAA+BS,MAAAA,OAAO,EAAES;AAAxC,KAAD,CAAR;AACD;AACF,CArBD;;AAuBA,SAASjB,UAAT,EAAqBkB,mBAArB","sourcesContent":["import Axios from \"axios\";\nimport {\n  PRODUCT_ADD_REQUEST,\n  PRODUCT_ADD_SUCCESS,\n  PRODUCT_ADD_FAIL,\n  PRODUCT_DOWNLOAD_REQUEST,\n  PRODUCT_DOWNLOAD_SUCCESS,\n  PRODUCT_DOWNLOAD_FAIL,\n} from \"../constants/adminConstants\";\n\nconst addProduct = (productName, batchNumber, serialNumber, point) => async (\n  dispatch,\n  getState\n) => {\n  dispatch({\n    type: PRODUCT_ADD_REQUEST,\n    payload: { productName, batchNumber, serialNumber, point },\n  });\n  const {\n    userSignin: { userInfo },\n  } = getState();\n  try {\n    const { data } = await Axios.post(\n      \"/api/admin/code-generator\",\n      { productName, batchNumber, serialNumber, point },\n      {\n        headers: {\n          Authorization: \"Bearer \" + userInfo.token,\n        },\n      }\n    );\n    dispatch({ type: PRODUCT_ADD_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: PRODUCT_ADD_FAIL, payload: error.message });\n  }\n};\n\nconst productListDownload = () => async (dispatch, getState) => {\n  dispatch({\n    type: PRODUCT_DOWNLOAD_REQUEST,\n  });\n  const {\n    userSignin: { userInfo },\n  } = getState();\n  try {\n    const { data } = await Axios.post(\"/api/admin/code-generator\", {\n      headers: {\n        Authorization: \"Bearer \" + userInfo.token,\n      },\n    });\n    dispatch({ type: PRODUCT_DOWNLOAD_SUCCESS});\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: PRODUCT_DOWNLOAD_FAIL, payload: message });\n  }\n};\n\nexport { addProduct, productListDownload };\n"]},"metadata":{},"sourceType":"module"}