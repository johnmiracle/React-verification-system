{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/apple/Downloads/React-verification-system/client/src/pages/ImageCropper.js\",\n    _s = $RefreshSig$();\n\n/** @format */\nimport React, { useState } from 'react';\nimport Cropper from 'react-easy-crop';\nimport { getCroppedImg } from './cropImage';\n\nconst ImageCropper = ({\n  getBlob,\n  inputImg\n}) => {\n  _s();\n\n  const [crop, setCrop] = useState({\n    x: 0,\n    y: 0\n  });\n  const [zoom, setZoom] = useState(1);\n  /* onCropComplete() will occur each time the user modifies the cropped area, \n     which isn't ideal. A better implementation would be getting the blob \n     only when the user hits the submit button, but this works for now  */\n\n  const onCropComplete = async (_, croppedAreaPixels) => {\n    const croppedImage = await getCroppedImg(inputImg, croppedAreaPixels);\n    getBlob(croppedImage);\n  };\n\n  return (\n    /*#__PURE__*/\n\n    /* need to have a parent with `position: relative` \n      to prevent cropper taking up whole page */\n    _jsxDEV(\"div\", {\n      className: \"cropper\",\n      children: /*#__PURE__*/_jsxDEV(Cropper, {\n        image: inputImg,\n        crop: crop,\n        zoom: zoom,\n        aspect: 1,\n        onCropChange: setCrop,\n        onCropComplete: onCropComplete,\n        onZoomChange: setZoom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 3\n    }, this)\n  );\n};\n\n_s(ImageCropper, \"Dk3ltuJ1+qQBpq7a2t8Uo9DPeFQ=\");\n\n_c = ImageCropper;\nexport default ImageCropper;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageCropper\");","map":{"version":3,"sources":["/Users/apple/Downloads/React-verification-system/client/src/pages/ImageCropper.js"],"names":["React","useState","Cropper","getCroppedImg","ImageCropper","getBlob","inputImg","crop","setCrop","x","y","zoom","setZoom","onCropComplete","_","croppedAreaPixels","croppedImage"],"mappings":";;;;;AAAA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,SAASC,aAAT,QAA8B,aAA9B;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAA2B;AAAA;;AAC/C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC;AAAEQ,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAD,CAAhC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,CAAD,CAAhC;AAEA;AACD;AACA;;AACC,QAAMY,cAAc,GAAG,OAAOC,CAAP,EAAUC,iBAAV,KAAgC;AACtD,UAAMC,YAAY,GAAG,MAAMb,aAAa,CAACG,QAAD,EAAWS,iBAAX,CAAxC;AACAV,IAAAA,OAAO,CAACW,YAAD,CAAP;AACA,GAHD;;AAKA;AAAA;;AACC;AACF;AACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACC,QAAC,OAAD;AACC,QAAA,KAAK,EAAEV,QADR;AAEC,QAAA,IAAI,EAAEC,IAFP;AAGC,QAAA,IAAI,EAAEI,IAHP;AAIC,QAAA,MAAM,EAAE,CAJT;AAKC,QAAA,YAAY,EAAEH,OALf;AAMC,QAAA,cAAc,EAAEK,cANjB;AAOC,QAAA,YAAY,EAAED;AAPf;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AAHD;AAeA,CA3BD;;GAAMR,Y;;KAAAA,Y;AA6BN,eAAeA,YAAf","sourcesContent":["/** @format */\n\nimport React, { useState } from 'react';\nimport Cropper from 'react-easy-crop';\nimport { getCroppedImg } from './cropImage';\n\nconst ImageCropper = ({ getBlob, inputImg }) => {\n\tconst [crop, setCrop] = useState({ x: 0, y: 0 });\n\tconst [zoom, setZoom] = useState(1);\n\n\t/* onCropComplete() will occur each time the user modifies the cropped area, \n    which isn't ideal. A better implementation would be getting the blob \n    only when the user hits the submit button, but this works for now  */\n\tconst onCropComplete = async (_, croppedAreaPixels) => {\n\t\tconst croppedImage = await getCroppedImg(inputImg, croppedAreaPixels);\n\t\tgetBlob(croppedImage);\n\t};\n\n\treturn (\n\t\t/* need to have a parent with `position: relative` \n    to prevent cropper taking up whole page */\n\t\t<div className=\"cropper\">\n\t\t\t<Cropper\n\t\t\t\timage={inputImg}\n\t\t\t\tcrop={crop}\n\t\t\t\tzoom={zoom}\n\t\t\t\taspect={1}\n\t\t\t\tonCropChange={setCrop}\n\t\t\t\tonCropComplete={onCropComplete}\n\t\t\t\tonZoomChange={setZoom}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default ImageCropper;"]},"metadata":{},"sourceType":"module"}