{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/apple/Downloads/React-verification-system/client/src/pages/CropImage.js\",\n    _s = $RefreshSig$();\n\n/** @format */\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css'; // function generateDownload(canvas, crop) {}\n\nfunction CropDemo(canvas) {\n  _s();\n\n  var _completedCrop$width, _completedCrop$height;\n\n  const [upImg, setUpImg] = useState();\n  const imgRef = useRef(null);\n  const previewCanvasRef = useRef(null);\n  const [crop, setCrop] = useState({\n    unit: '%',\n    width: 30,\n    aspect: 16 / 9\n  });\n  const [completedCrop, setCompletedCrop] = useState(null);\n\n  const onSelectFile = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () => setUpImg(reader.result));\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  const onLoad = useCallback(img => {\n    imgRef.current = img;\n  }, []);\n  useEffect(() => {\n    if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n      return;\n    }\n\n    const image = imgRef.current;\n    const canvas = previewCanvasRef.current;\n    const crop = completedCrop;\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    const ctx = canvas.getContext('2d');\n    const pixelRatio = window.devicePixelRatio;\n    canvas.width = crop.width * pixelRatio;\n    canvas.height = crop.height * pixelRatio;\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingQuality = 'high';\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height); // As Base64 string\n\n    function base64Image() {\n      const base64Img = canvas.toDataURL('image/jpeg');\n      console.log(base64Img);\n    }\n  }, [completedCrop]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: onSelectFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(ReactCrop, {\n      src: upImg,\n      crop: crop,\n      onImageLoaded: onLoad,\n      onChange: c => setCrop(c),\n      onComplete: c => setCompletedCrop(c)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: previewCanvasRef // Rounding is important so the canvas width and height matches/is a multiple for sharpness.\n        ,\n        style: {\n          width: Math.round((_completedCrop$width = completedCrop === null || completedCrop === void 0 ? void 0 : completedCrop.width) !== null && _completedCrop$width !== void 0 ? _completedCrop$width : 0),\n          height: Math.round((_completedCrop$height = completedCrop === null || completedCrop === void 0 ? void 0 : completedCrop.height) !== null && _completedCrop$height !== void 0 ? _completedCrop$height : 0)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CropDemo, \"nyNsYj31u3EdJX9/X93LyWDPNls=\");\n\n_c = CropDemo;\nexport default CropDemo;\n\nvar _c;\n\n$RefreshReg$(_c, \"CropDemo\");","map":{"version":3,"sources":["/Users/apple/Downloads/React-verification-system/client/src/pages/CropImage.js"],"names":["React","useCallback","useEffect","useRef","useState","ReactCrop","CropDemo","canvas","upImg","setUpImg","imgRef","previewCanvasRef","crop","setCrop","unit","width","aspect","completedCrop","setCompletedCrop","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL","onLoad","img","current","image","scaleX","naturalWidth","scaleY","naturalHeight","height","ctx","getContext","pixelRatio","window","devicePixelRatio","setTransform","imageSmoothingQuality","drawImage","x","y","base64Image","base64Img","toDataURL","console","log","c","Math","round"],"mappings":"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","sourcesContent":["/** @format */\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\n// function generateDownload(canvas, crop) {}\n\nfunction CropDemo(canvas) {\n\tconst [upImg, setUpImg] = useState();\n\tconst imgRef = useRef(null);\n\tconst previewCanvasRef = useRef(null);\n\tconst [crop, setCrop] = useState({ unit: '%', width: 30, aspect: 16 / 9 });\n\tconst [completedCrop, setCompletedCrop] = useState(null);\n\n\tconst onSelectFile = (e) => {\n\t\tif (e.target.files && e.target.files.length > 0) {\n\t\t\tconst reader = new FileReader();\n\t\t\treader.addEventListener('load', () => setUpImg(reader.result));\n\t\t\treader.readAsDataURL(e.target.files[0]);\n\t\t}\n\t};\n\n\tconst onLoad = useCallback((img) => {\n\t\timgRef.current = img;\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst image = imgRef.current;\n\t\tconst canvas = previewCanvasRef.current;\n\t\tconst crop = completedCrop;\n\n\t\tconst scaleX = image.naturalWidth / image.width;\n\t\tconst scaleY = image.naturalHeight / image.height;\n\t\tconst ctx = canvas.getContext('2d');\n\t\tconst pixelRatio = window.devicePixelRatio;\n\n\t\tcanvas.width = crop.width * pixelRatio;\n\t\tcanvas.height = crop.height * pixelRatio;\n\n\t\tctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n\t\tctx.imageSmoothingQuality = 'high';\n\n\t\tctx.drawImage(\n\t\t\timage,\n\t\t\tcrop.x * scaleX,\n\t\t\tcrop.y * scaleY,\n\t\t\tcrop.width * scaleX,\n\t\t\tcrop.height * scaleY,\n\t\t\t0,\n\t\t\t0,\n\t\t\tcrop.width,\n\t\t\tcrop.height\n\t\t);\n\n\t\t// As Base64 string\n\t\tfunction base64Image() {\n\t\t\tconst base64Img = canvas.toDataURL('image/jpeg');\n\t\t\tconsole.log(base64Img);\n\t\t}\n\t\t\n\t}, [completedCrop]);\n\n\treturn (\n\t\t<>\n\t\t\t<input type=\"file\" accept=\"image/*\" onChange={onSelectFile} />\n\t\t\t<ReactCrop\n\t\t\t\tsrc={upImg}\n\t\t\t\tcrop={crop}\n\t\t\t\tonImageLoaded={onLoad}\n\t\t\t\tonChange={(c) => setCrop(c)}\n\t\t\t\tonComplete={(c) => setCompletedCrop(c)}\n\t\t\t/>\n\n\t\t\t<div>\n\t\t\t\t<canvas\n\t\t\t\t\tref={previewCanvasRef}\n\t\t\t\t\t// Rounding is important so the canvas width and height matches/is a multiple for sharpness.\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: Math.round(completedCrop?.width ?? 0),\n\t\t\t\t\t\theight: Math.round(completedCrop?.height ?? 0)\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t{/* <button\n\t\t\t\ttype=\"button\"\n\t\t\t\tdisabled={!completedCrop?.width || !completedCrop?.height}\n\t\t\t\tonClick={() => generateDownload(previewCanvasRef.current, completedCrop)}\n\t\t\t\tclassName=\"mb-5\"\n\t\t\t>\n\t\t\t\tDownload cropped image\n\t\t\t</button> */}\n\t\t</>\n\t);\n}\n\nexport default CropDemo;\n"]},"metadata":{},"sourceType":"module"}