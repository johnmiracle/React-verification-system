{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/apple/Downloads/React-verification-system/client/src/pages/CropDemo.js\",\n    _s = $RefreshSig$();\n\n/** @format */\nimport React, { useCallback, useRef, useState } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport CropDialog from './CropDialog';\nconst PIXEL_RATIO = 4;\n\nfunction CropDemo(props) {\n  _s();\n\n  const [crop, setCrop] = useState({\n    unit: '%',\n    width: 80,\n    aspect: 16 / 9\n  });\n  const [src, setSrc] = useState();\n  const [completedCrop, setCompletedCrop] = useState();\n  const [open, setModalOpen] = useState(false);\n  const [preview, setPreview] = useState();\n  const [croppedFile, setCroppedFile] = useState();\n  const imgRef = useRef(null);\n  const previewCanvasRef = useRef(null);\n  const onLoad = useCallback(img => {\n    imgRef.current = img;\n  }, []);\n  React.useEffect(() => {\n    if (props.selectedFile) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () => setSrc(reader.result));\n      reader.readAsDataURL(props.selectedFile);\n      setModalOpen(true);\n    }\n  }, [props.selectedFile]);\n  React.useEffect(() => {\n    if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n      return;\n    }\n\n    const image = imgRef.current;\n    const canvas = previewCanvasRef.current;\n    const crop = completedCrop;\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    const ctx = canvas.getContext('2d');\n    canvas.width = crop.width * PIXEL_RATIO;\n    canvas.height = crop.height * PIXEL_RATIO;\n    ctx.setTransform(PIXEL_RATIO, 0, 0, PIXEL_RATIO, 0, 0);\n    ctx.imageSmoothingEnabled = false;\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    canvas.toBlob(blob => {\n      const previewUrl = URL.createObjectURL(blob);\n      const newFile = new File([blob], props.selectedFile.name);\n      setPreview(previewUrl);\n      setCroppedFile(newFile);\n    }, 'image/jpg');\n  }, [completedCrop]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CropDialog, {\n      open: open,\n      onHide: () => setModalOpen(false),\n      onSave: () => {\n        props.onSave({\n          file: croppedFile,\n          preview\n        });\n        setModalOpen(false);\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactCrop, {\n        src: src,\n        style: {\n          maxHeight: '550px'\n        },\n        crop: crop,\n        locked: true,\n        onChange: (crop, percentCrop) => setCrop(percentCrop),\n        onComplete: c => setCompletedCrop(c),\n        onImageLoaded: onLoad\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: previewCanvasRef,\n      style: {\n        width: 0,\n        height: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CropDemo, \"9Uc1m64KaBPSWWJCCcNsskI19Pg=\");\n\n_c = CropDemo;\nexport default CropDemo;\n\nvar _c;\n\n$RefreshReg$(_c, \"CropDemo\");","map":{"version":3,"sources":["/Users/apple/Downloads/React-verification-system/client/src/pages/CropDemo.js"],"names":["React","useCallback","useRef","useState","ReactCrop","CropDialog","PIXEL_RATIO","CropDemo","props","crop","setCrop","unit","width","aspect","src","setSrc","completedCrop","setCompletedCrop","open","setModalOpen","preview","setPreview","croppedFile","setCroppedFile","imgRef","previewCanvasRef","onLoad","img","current","useEffect","selectedFile","reader","FileReader","addEventListener","result","readAsDataURL","image","canvas","scaleX","naturalWidth","scaleY","naturalHeight","height","ctx","getContext","setTransform","imageSmoothingEnabled","drawImage","x","y","toBlob","blob","previewUrl","URL","createObjectURL","newFile","File","name","onSave","file","maxHeight","percentCrop","c"],"mappings":"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","sourcesContent":["/** @format */\n\nimport React, { useCallback, useRef, useState } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport CropDialog from './CropDialog';\n\nconst PIXEL_RATIO = 4;\n\nfunction CropDemo(props) {\n\tconst [crop, setCrop] = useState({\n\t\tunit: '%',\n\t\twidth: 80,\n\t\taspect: 16 / 9\n\t});\n\n\tconst [src, setSrc] = useState();\n\n\tconst [completedCrop, setCompletedCrop] = useState();\n\n\tconst [open, setModalOpen] = useState(false);\n\n\tconst [preview, setPreview] = useState();\n\tconst [croppedFile, setCroppedFile] = useState();\n\n\tconst imgRef = useRef(null);\n\n\tconst previewCanvasRef = useRef(null);\n\n\tconst onLoad = useCallback((img) => {\n\t\timgRef.current = img;\n\t}, []);\n\n\tReact.useEffect(() => {\n\t\tif (props.selectedFile) {\n\t\t\tconst reader = new FileReader();\n\t\t\treader.addEventListener('load', () => setSrc(reader.result));\n\t\t\treader.readAsDataURL(props.selectedFile);\n\t\t\tsetModalOpen(true);\n\t\t}\n\t}, [props.selectedFile]);\n\n\tReact.useEffect(() => {\n\t\tif (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst image = imgRef.current;\n\t\tconst canvas = previewCanvasRef.current;\n\t\tconst crop = completedCrop;\n\n\t\tconst scaleX = image.naturalWidth / image.width;\n\t\tconst scaleY = image.naturalHeight / image.height;\n\n\t\tconst ctx = canvas.getContext('2d');\n\n\t\tcanvas.width = crop.width * PIXEL_RATIO;\n\t\tcanvas.height = crop.height * PIXEL_RATIO;\n\n\t\tctx.setTransform(PIXEL_RATIO, 0, 0, PIXEL_RATIO, 0, 0);\n\t\tctx.imageSmoothingEnabled = false;\n\n\t\tctx.drawImage(\n\t\t\timage,\n\t\t\tcrop.x * scaleX,\n\t\t\tcrop.y * scaleY,\n\t\t\tcrop.width * scaleX,\n\t\t\tcrop.height * scaleY,\n\t\t\t0,\n\t\t\t0,\n\t\t\tcrop.width,\n\t\t\tcrop.height\n\t\t);\n\n\t\tcanvas.toBlob((blob) => {\n\t\t\tconst previewUrl = URL.createObjectURL(blob);\n\t\t\tconst newFile = new File([blob], props.selectedFile.name);\n\n\t\t\tsetPreview(previewUrl);\n\t\t\tsetCroppedFile(newFile);\n\t\t}, 'image/jpg');\n\t}, [completedCrop]);\n\n\treturn (\n\t\t<>\n\t\t\t<CropDialog\n\t\t\t\topen={open}\n\t\t\t\tonHide={() => setModalOpen(false)}\n\t\t\t\tonSave={() => {\n\t\t\t\t\tprops.onSave({ file: croppedFile, preview });\n\t\t\t\t\tsetModalOpen(false);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<ReactCrop\n\t\t\t\t\tsrc={src}\n\t\t\t\t\tstyle={{ maxHeight: '550px' }}\n\t\t\t\t\tcrop={crop}\n\t\t\t\t\tlocked\n\t\t\t\t\tonChange={(crop, percentCrop) => setCrop(percentCrop)}\n\t\t\t\t\tonComplete={(c) => setCompletedCrop(c)}\n\t\t\t\t\tonImageLoaded={onLoad}\n\t\t\t\t/>\n\t\t\t</CropDialog>\n\n\t\t\t<canvas ref={previewCanvasRef} style={{ width: 0, height: 0 }} />\n\t\t</>\n\t);\n}\n\nexport default CropDemo;\n"]},"metadata":{},"sourceType":"module"}