{"ast":null,"code":"/** @format */\nconst version = 'FarmSured-1';\nconst urlsToCache = ['/', 'index.html', 'offline.html'];\nconst self = this; // Install SW\n// self.addEventListener('install', (event) => {\n// \tevent.waitUntil(\n// \t\tcaches.open(CACHE_NAME).then((caches) => {\n// \t\t\tconsole.log('Opened cache');\n// \t\t\treturn caches.addAll(urlsToCache);\n// \t\t})\n// \t);\n// });\n// self.addEventListener('install', function (event) {\n// \tconsole.log('WORKER: install event in progress.');\n// \tevent.waitUntil(\n// \t\tcaches\n// \t\t\t.open(version + 'fundamentals')\n// \t\t\t.then(function (cache) {\n// \t\t\t\treturn cache.addAll(urlsToCache);\n// \t\t\t})\n// \t\t\t.then(function () {\n// \t\t\t\tconsole.log('WORKER: install completed');\n// \t\t\t})\n// \t);\n// });\n// self.addEventListener('fetch', function (event) {\n// \tconsole.log('WORKER: fetch event in progress.');\n// \tif (event.request.method !== 'GET') {\n// \t\tconsole.log('WORKER: fetch event ignored.', event.request.method, event.request.url);\n// \t\treturn;\n// \t}\n// \tevent.respondWith(\n// \t\tcaches.match(event.request).then(function (cached) {\n// \t\t\tvar networked = fetch(event.request)\n// \t\t\t\t// We handle the network request with success and failure scenarios.\n// \t\t\t\t.then(fetchedFromNetwork, unableToResolve)\n// \t\t\t\t// We should catch errors on the fetchedFromNetwork handler as well.\n// \t\t\t\t.catch(unableToResolve);\n// \t\t\tconsole.log('WORKER: fetch event', cached ? '(cached)' : '(network)', event.request.url);\n// \t\t\treturn cached || networked;\n// \t\t\tfunction fetchedFromNetwork(response) {\n// \t\t\t\tvar cacheCopy = response.clone();\n// \t\t\t\tconsole.log('WORKER: fetch response from network.', event.request.url);\n// \t\t\t\tcaches\n// \t\t\t\t\t// We open a cache to store the response for this request.\n// \t\t\t\t\t.open(version + 'pages')\n// \t\t\t\t\t.then(function add(cache) {\n// \t\t\t\t\t\tcache.put(event.request, cacheCopy);\n// \t\t\t\t\t})\n// \t\t\t\t\t.then(function () {\n// \t\t\t\t\t\tconsole.log('WORKER: fetch response stored in cache.', event.request.url);\n// \t\t\t\t\t});\n// \t\t\t\t// Return the response so that the promise is settled in fulfillment.\n// \t\t\t\treturn response;\n// \t\t\t}\n// \t\t\tfunction unableToResolve() {\n// \t\t\t\tconsole.log('WORKER: fetch request failed in both cache and network.');\n// \t\t\t\treturn fetch(event.request).catch(() => caches.match('offline.html'))\n// \t\t\t}\n// \t\t})\n// \t);\n// });\n// self.addEventListener('activate', function (event) {\n// \tconsole.log('WORKER: activate event in progress.');\n// \tevent.waitUntil(\n// \t\tcaches\n// \t\t\t.keys()\n// \t\t\t.then(function (keys) {\n// \t\t\t\t// We return a promise that settles when all outdated caches are deleted.\n// \t\t\t\treturn Promise.all(\n// \t\t\t\t\tkeys\n// \t\t\t\t\t\t.filter(function (key) {\n// \t\t\t\t\t\t\t// Filter by keys that don't start with the latest version prefix.\n// \t\t\t\t\t\t\treturn !key.startsWith(version);\n// \t\t\t\t\t\t})\n// \t\t\t\t\t\t.map(function (key) {\n// \t\t\t\t\t\t\treturn caches.delete(key);\n// \t\t\t\t\t\t})\n// \t\t\t\t);\n// \t\t\t})\n// \t\t\t.then(function () {\n// \t\t\t\tconsole.log('WORKER: activate completed.');\n// \t\t\t})\n// \t);\n// });\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = '/serviceworker.js';\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the old content will have been purged and\n            // the fresh content will have been added to the cache.\n            // It's the perfect time to display a \"New content is\n            // available; please refresh.\" message in your web app.\n            console.log('New content is available; please refresh.');\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.');\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}","map":{"version":3,"sources":["/Users/apple/Downloads/React-verification-system/client/src/serviceworker.js"],"names":["version","urlsToCache","self","isLocalhost","Boolean","window","location","hostname","match","register","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","origin","addEventListener","swUrl","registerValidSW","checkValidServiceWorker","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","fetch","response","status","headers","get","indexOf","ready","unregister","reload"],"mappings":"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","sourcesContent":["/** @format */\n\nconst version = 'FarmSured-1';\nconst urlsToCache = ['/', 'index.html', 'offline.html'];\n\nconst self = this;\n\n// Install SW\n// self.addEventListener('install', (event) => {\n// \tevent.waitUntil(\n// \t\tcaches.open(CACHE_NAME).then((caches) => {\n// \t\t\tconsole.log('Opened cache');\n// \t\t\treturn caches.addAll(urlsToCache);\n// \t\t})\n// \t);\n// });\n// self.addEventListener('install', function (event) {\n// \tconsole.log('WORKER: install event in progress.');\n// \tevent.waitUntil(\n// \t\tcaches\n// \t\t\t.open(version + 'fundamentals')\n// \t\t\t.then(function (cache) {\n// \t\t\t\treturn cache.addAll(urlsToCache);\n// \t\t\t})\n// \t\t\t.then(function () {\n// \t\t\t\tconsole.log('WORKER: install completed');\n// \t\t\t})\n// \t);\n// });\n\n// self.addEventListener('fetch', function (event) {\n// \tconsole.log('WORKER: fetch event in progress.');\n// \tif (event.request.method !== 'GET') {\n// \t\tconsole.log('WORKER: fetch event ignored.', event.request.method, event.request.url);\n// \t\treturn;\n// \t}\n\n// \tevent.respondWith(\n// \t\tcaches.match(event.request).then(function (cached) {\n// \t\t\tvar networked = fetch(event.request)\n// \t\t\t\t// We handle the network request with success and failure scenarios.\n// \t\t\t\t.then(fetchedFromNetwork, unableToResolve)\n// \t\t\t\t// We should catch errors on the fetchedFromNetwork handler as well.\n// \t\t\t\t.catch(unableToResolve);\n// \t\t\tconsole.log('WORKER: fetch event', cached ? '(cached)' : '(network)', event.request.url);\n// \t\t\treturn cached || networked;\n\n// \t\t\tfunction fetchedFromNetwork(response) {\n// \t\t\t\tvar cacheCopy = response.clone();\n\n// \t\t\t\tconsole.log('WORKER: fetch response from network.', event.request.url);\n// \t\t\t\tcaches\n// \t\t\t\t\t// We open a cache to store the response for this request.\n// \t\t\t\t\t.open(version + 'pages')\n// \t\t\t\t\t.then(function add(cache) {\n// \t\t\t\t\t\tcache.put(event.request, cacheCopy);\n// \t\t\t\t\t})\n// \t\t\t\t\t.then(function () {\n// \t\t\t\t\t\tconsole.log('WORKER: fetch response stored in cache.', event.request.url);\n// \t\t\t\t\t});\n\n// \t\t\t\t// Return the response so that the promise is settled in fulfillment.\n// \t\t\t\treturn response;\n// \t\t\t}\n// \t\t\tfunction unableToResolve() {\n// \t\t\t\tconsole.log('WORKER: fetch request failed in both cache and network.');\n// \t\t\t\treturn fetch(event.request).catch(() => caches.match('offline.html'))\n// \t\t\t}\n// \t\t})\n// \t);\n// });\n\n\n// self.addEventListener('activate', function (event) {\n// \tconsole.log('WORKER: activate event in progress.');\n// \tevent.waitUntil(\n// \t\tcaches\n// \t\t\t.keys()\n// \t\t\t.then(function (keys) {\n// \t\t\t\t// We return a promise that settles when all outdated caches are deleted.\n// \t\t\t\treturn Promise.all(\n// \t\t\t\t\tkeys\n// \t\t\t\t\t\t.filter(function (key) {\n// \t\t\t\t\t\t\t// Filter by keys that don't start with the latest version prefix.\n// \t\t\t\t\t\t\treturn !key.startsWith(version);\n// \t\t\t\t\t\t})\n// \t\t\t\t\t\t.map(function (key) {\n// \t\t\t\t\t\t\treturn caches.delete(key);\n// \t\t\t\t\t\t})\n// \t\t\t\t);\n// \t\t\t})\n// \t\t\t.then(function () {\n// \t\t\t\tconsole.log('WORKER: activate completed.');\n// \t\t\t})\n// \t);\n// });\n\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport default function register() {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = '/serviceworker.js';\n\n\t\t\tif (!isLocalhost) {\n\t\t\t\t// Is not local host. Just register service worker\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t} else {\n\t\t\t\t// This is running on localhost. Lets check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the old content will have been purged and\n\t\t\t\t\t\t\t// the fresh content will have been added to the cache.\n\t\t\t\t\t\t\t// It's the perfect time to display a \"New content is\n\t\t\t\t\t\t\t// available; please refresh.\" message in your web app.\n\t\t\t\t\t\t\tconsole.log('New content is available; please refresh.');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\tresponse.headers.get('content-type').indexOf('javascript') === -1\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\n\n"]},"metadata":{},"sourceType":"module"}