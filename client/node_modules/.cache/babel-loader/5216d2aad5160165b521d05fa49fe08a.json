{"ast":null,"code":"/** @format */\nconst version = 'FarmSured-1';\nconst urlsToCache = ['/', 'index.html', 'offline.html'];\nconst self = this; // Install SW\n// self.addEventListener('install', (event) => {\n// \tevent.waitUntil(\n// \t\tcaches.open(CACHE_NAME).then((caches) => {\n// \t\t\tconsole.log('Opened cache');\n// \t\t\treturn caches.addAll(urlsToCache);\n// \t\t})\n// \t);\n// });\n\nself.addEventListener('install', function (event) {\n  console.log('WORKER: install event in progress.');\n  event.waitUntil(caches.open(version + 'fundamentals').then(function (cache) {\n    return cache.addAll(urlsToCache);\n  }).then(function () {\n    console.log('WORKER: install completed');\n  }));\n});\nself.addEventListener('fetch', function (event) {\n  console.log('WORKER: fetch event in progress.');\n\n  if (event.request.method !== 'GET') {\n    console.log('WORKER: fetch event ignored.', event.request.method, event.request.url);\n    return;\n  }\n\n  event.respondWith(caches.match(event.request).then(function (cached) {\n    var networked = fetch(event.request) // We handle the network request with success and failure scenarios.\n    .then(fetchedFromNetwork, unableToResolve) // We should catch errors on the fetchedFromNetwork handler as well.\n    .catch(unableToResolve);\n    console.log('WORKER: fetch event', cached ? '(cached)' : '(network)', event.request.url);\n    return cached || networked;\n\n    function fetchedFromNetwork(response) {\n      var cacheCopy = response.clone();\n      console.log('WORKER: fetch response from network.', event.request.url);\n      caches // We open a cache to store the response for this request.\n      .open(version + 'pages').then(function add(cache) {\n        cache.put(event.request, cacheCopy);\n      }).then(function () {\n        console.log('WORKER: fetch response stored in cache.', event.request.url);\n      }); // Return the response so that the promise is settled in fulfillment.\n\n      return response;\n    }\n\n    function unableToResolve() {\n      console.log('WORKER: fetch request failed in both cache and network.');\n      return fetch(event.request).catch(() => caches.match('offline.html'));\n    }\n  }));\n});\nself.addEventListener('activate', function (event) {\n  console.log('WORKER: activate event in progress.');\n  event.waitUntil(caches.keys().then(function (keys) {\n    // We return a promise that settles when all outdated caches are deleted.\n    return Promise.all(keys.filter(function (key) {\n      // Filter by keys that don't start with the latest version prefix.\n      return !key.startsWith(version);\n    }).map(function (key) {\n      return caches.delete(key);\n    }));\n  }).then(function () {\n    console.log('WORKER: activate completed.');\n  }));\n});","map":{"version":3,"sources":["/Users/apple/Downloads/React-verification-system/client/src/serviceworker.js"],"names":["version","urlsToCache","self","addEventListener","event","console","log","waitUntil","caches","open","then","cache","addAll","request","method","url","respondWith","match","cached","networked","fetch","fetchedFromNetwork","unableToResolve","catch","response","cacheCopy","clone","add","put","keys","Promise","all","filter","key","startsWith","map","delete"],"mappings":"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","sourcesContent":["/** @format */\n\nconst version = 'FarmSured-1';\nconst urlsToCache = ['/', 'index.html', 'offline.html'];\n\nconst self = this;\n\n// Install SW\n// self.addEventListener('install', (event) => {\n// \tevent.waitUntil(\n// \t\tcaches.open(CACHE_NAME).then((caches) => {\n// \t\t\tconsole.log('Opened cache');\n// \t\t\treturn caches.addAll(urlsToCache);\n// \t\t})\n// \t);\n// });\nself.addEventListener('install', function (event) {\n\tconsole.log('WORKER: install event in progress.');\n\tevent.waitUntil(\n\t\tcaches\n\t\t\t.open(version + 'fundamentals')\n\t\t\t.then(function (cache) {\n\t\t\t\treturn cache.addAll(urlsToCache);\n\t\t\t})\n\t\t\t.then(function () {\n\t\t\t\tconsole.log('WORKER: install completed');\n\t\t\t})\n\t);\n});\n\nself.addEventListener('fetch', function (event) {\n\tconsole.log('WORKER: fetch event in progress.');\n\tif (event.request.method !== 'GET') {\n\t\tconsole.log('WORKER: fetch event ignored.', event.request.method, event.request.url);\n\t\treturn;\n\t}\n\n\tevent.respondWith(\n\t\tcaches.match(event.request).then(function (cached) {\n\t\t\tvar networked = fetch(event.request)\n\t\t\t\t// We handle the network request with success and failure scenarios.\n\t\t\t\t.then(fetchedFromNetwork, unableToResolve)\n\t\t\t\t// We should catch errors on the fetchedFromNetwork handler as well.\n\t\t\t\t.catch(unableToResolve);\n\t\t\tconsole.log('WORKER: fetch event', cached ? '(cached)' : '(network)', event.request.url);\n\t\t\treturn cached || networked;\n\n\t\t\tfunction fetchedFromNetwork(response) {\n\t\t\t\tvar cacheCopy = response.clone();\n\n\t\t\t\tconsole.log('WORKER: fetch response from network.', event.request.url);\n\t\t\t\tcaches\n\t\t\t\t\t// We open a cache to store the response for this request.\n\t\t\t\t\t.open(version + 'pages')\n\t\t\t\t\t.then(function add(cache) {\n\t\t\t\t\t\tcache.put(event.request, cacheCopy);\n\t\t\t\t\t})\n\t\t\t\t\t.then(function () {\n\t\t\t\t\t\tconsole.log('WORKER: fetch response stored in cache.', event.request.url);\n\t\t\t\t\t});\n\n\t\t\t\t// Return the response so that the promise is settled in fulfillment.\n\t\t\t\treturn response;\n\t\t\t}\n\t\t\tfunction unableToResolve() {\n\t\t\t\tconsole.log('WORKER: fetch request failed in both cache and network.');\n\t\t\t\treturn fetch(event.request).catch(() => caches.match('offline.html'))\n\t\t\t}\n\t\t})\n\t);\n});\n\n\nself.addEventListener('activate', function (event) {\n\tconsole.log('WORKER: activate event in progress.');\n\tevent.waitUntil(\n\t\tcaches\n\t\t\t.keys()\n\t\t\t.then(function (keys) {\n\t\t\t\t// We return a promise that settles when all outdated caches are deleted.\n\t\t\t\treturn Promise.all(\n\t\t\t\t\tkeys\n\t\t\t\t\t\t.filter(function (key) {\n\t\t\t\t\t\t\t// Filter by keys that don't start with the latest version prefix.\n\t\t\t\t\t\t\treturn !key.startsWith(version);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.map(function (key) {\n\t\t\t\t\t\t\treturn caches.delete(key);\n\t\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t})\n\t\t\t.then(function () {\n\t\t\t\tconsole.log('WORKER: activate completed.');\n\t\t\t})\n\t);\n});\n\n\n"]},"metadata":{},"sourceType":"module"}