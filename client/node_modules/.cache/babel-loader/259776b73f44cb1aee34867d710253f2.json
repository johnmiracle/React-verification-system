{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/apple/Downloads/React-verification-system/client/src/pages/CropImage.js\",\n    _s = $RefreshSig$();\n\n/** @format */\nimport React, { useState, useCallback, useRef, useEffect } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nfunction CropImage() {\n  _s();\n\n  // if (!crop || !canvas) {\n  // \treturn;\n  // }\n  canvas.toBlob(blob => {\n    const previewUrl = window.URL.createObjectURL(blob);\n    const anchor = document.createElement('a');\n    anchor.download = 'cropPreview.png';\n    anchor.href = URL.createObjectURL(blob);\n    anchor.click();\n    window.URL.revokeObjectURL(previewUrl);\n  }, 'image/png', 1);\n  const [upImg, setUpImg] = useState();\n  const imgRef = useRef(null);\n  const previewCanvasRef = useRef(null);\n  const [crop, setCrop] = useState({\n    unit: '%',\n    width: 30,\n    aspect: 16 / 9\n  });\n  const [completedCrop, setCompletedCrop] = useState(null);\n\n  const onSelectFile = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () => setUpImg(reader.result));\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  const onLoad = useCallback(img => {\n    imgRef.current = img;\n  }, []);\n  useEffect(() => {\n    if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n      return;\n    }\n\n    const image = imgRef.current;\n    const canvas = previewCanvasRef.current;\n    const crop = completedCrop;\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    const ctx = canvas.getContext('2d');\n    const pixelRatio = window.devicePixelRatio;\n    canvas.width = crop.width * pixelRatio;\n    canvas.height = crop.height * pixelRatio;\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingQuality = 'high';\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n  }, [completedCrop]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: onSelectFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(ReactCrop, {\n      src: upImg,\n      onImageLoaded: onLoad,\n      crop: crop,\n      onChange: c => setCrop(c),\n      onComplete: c => setCompletedCrop(c)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Note that the download below won't work in this sandbox due to the iframe missing 'allow-downloads'. It's just for your reference.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      disabled: !(completedCrop === null || completedCrop === void 0 ? void 0 : completedCrop.width) || !(completedCrop === null || completedCrop === void 0 ? void 0 : completedCrop.height),\n      onClick: () => generateDownload(previewCanvasRef.current, completedCrop),\n      children: \"Download cropped image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 3\n  }, this);\n}\n\n_s(CropImage, \"nyNsYj31u3EdJX9/X93LyWDPNls=\");\n\n_c = CropImage;\nexport default CropImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CropImage\");","map":{"version":3,"sources":["/Users/apple/Downloads/React-verification-system/client/src/pages/CropImage.js"],"names":["React","useState","useCallback","useRef","useEffect","ReactCrop","CropImage","canvas","toBlob","blob","previewUrl","window","URL","createObjectURL","anchor","document","createElement","download","href","click","revokeObjectURL","upImg","setUpImg","imgRef","previewCanvasRef","crop","setCrop","unit","width","aspect","completedCrop","setCompletedCrop","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL","onLoad","img","current","image","scaleX","naturalWidth","scaleY","naturalHeight","height","ctx","getContext","pixelRatio","devicePixelRatio","setTransform","imageSmoothingQuality","drawImage","x","y","c","generateDownload"],"mappings":"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","sourcesContent":["/** @format */\n\nimport React, { useState, useCallback, useRef, useEffect } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nfunction CropImage() {\n\t// if (!crop || !canvas) {\n\t// \treturn;\n\t// }\n\n\tcanvas.toBlob(\n\t\t(blob) => {\n\t\t\tconst previewUrl = window.URL.createObjectURL(blob);\n\n\t\t\tconst anchor = document.createElement('a');\n\t\t\tanchor.download = 'cropPreview.png';\n\t\t\tanchor.href = URL.createObjectURL(blob);\n\t\t\tanchor.click();\n\n\t\t\twindow.URL.revokeObjectURL(previewUrl);\n\t\t},\n\t\t'image/png',\n\t\t1\n\t);\n\n\tconst [upImg, setUpImg] = useState();\n\tconst imgRef = useRef(null);\n\tconst previewCanvasRef = useRef(null);\n\tconst [crop, setCrop] = useState({ unit: '%', width: 30, aspect: 16 / 9 });\n\tconst [completedCrop, setCompletedCrop] = useState(null);\n\n\tconst onSelectFile = (e) => {\n\t\tif (e.target.files && e.target.files.length > 0) {\n\t\t\tconst reader = new FileReader();\n\t\t\treader.addEventListener('load', () => setUpImg(reader.result));\n\t\t\treader.readAsDataURL(e.target.files[0]);\n\t\t}\n\t};\n\n\tconst onLoad = useCallback((img) => {\n\t\timgRef.current = img;\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst image = imgRef.current;\n\t\tconst canvas = previewCanvasRef.current;\n\t\tconst crop = completedCrop;\n\n\t\tconst scaleX = image.naturalWidth / image.width;\n\t\tconst scaleY = image.naturalHeight / image.height;\n\t\tconst ctx = canvas.getContext('2d');\n\t\tconst pixelRatio = window.devicePixelRatio;\n\n\t\tcanvas.width = crop.width * pixelRatio;\n\t\tcanvas.height = crop.height * pixelRatio;\n\n\t\tctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n\t\tctx.imageSmoothingQuality = 'high';\n\n\t\tctx.drawImage(\n\t\t\timage,\n\t\t\tcrop.x * scaleX,\n\t\t\tcrop.y * scaleY,\n\t\t\tcrop.width * scaleX,\n\t\t\tcrop.height * scaleY,\n\t\t\t0,\n\t\t\t0,\n\t\t\tcrop.width,\n\t\t\tcrop.height\n\t\t);\n\t}, [completedCrop]);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div>\n\t\t\t\t<input type=\"file\" accept=\"image/*\" onChange={onSelectFile} />\n\t\t\t</div>\n\t\t\t<ReactCrop\n\t\t\t\tsrc={upImg}\n\t\t\t\tonImageLoaded={onLoad}\n\t\t\t\tcrop={crop}\n\t\t\t\tonChange={(c) => setCrop(c)}\n\t\t\t\tonComplete={(c) => setCompletedCrop(c)}\n\t\t\t/>\n\t\t\t{/* <div>\n        <canvas\n          ref={previewCanvasRef}\n          // Rounding is important so the canvas width and height matches/is a multiple for sharpness.\n          style={{\n            width: Math.round(completedCrop?.width ?? 0),\n            height: Math.round(completedCrop?.height ?? 0)\n          }}\n        />\n      </div> */}\n\t\t\t<p>\n\t\t\t\tNote that the download below won't work in this sandbox due to the iframe missing\n\t\t\t\t'allow-downloads'. It's just for your reference.\n\t\t\t</p>\n\t\t\t<button\n\t\t\t\ttype=\"button\"\n\t\t\t\tdisabled={!completedCrop?.width || !completedCrop?.height}\n\t\t\t\tonClick={() => generateDownload(previewCanvasRef.current, completedCrop)}\n\t\t\t>\n\t\t\t\tDownload cropped image\n\t\t\t</button>\n\t\t</div>\n\t);\n}\nexport default CropImage;\n"]},"metadata":{},"sourceType":"module"}