{"ast":null,"code":"/** @format */\nimport React, { useState, useCallback, useRef, useEffect } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nfunction generateDownload(canvas, crop) {\n  if (!crop || !canvas) {\n    return;\n  }\n\n  canvas.toBlob(blob => {\n    const previewUrl = window.URL.createObjectURL(blob);\n    const anchor = document.createElement('a');\n    anchor.download = 'cropPreview.png';\n    anchor.href = URL.createObjectURL(blob);\n    anchor.click();\n    window.URL.revokeObjectURL(previewUrl);\n  }, 'image/png', 1);\n}\n\nfunction CropImage() {// const [upImg, setUpImg] = useState();\n  // const imgRef = useRef(null);\n  // const previewCanvasRef = useRef(null);\n  // const [crop, setCrop] = useState({ unit: '%', width: 30, aspect: 16 / 9 });\n  // const [completedCrop, setCompletedCrop] = useState(null);\n  // const onSelectFile = (e) => {\n  // \tif (e.target.files && e.target.files.length > 0) {\n  // \t\tconst reader = new FileReader();\n  // \t\treader.addEventListener('load', () => setUpImg(reader.result));\n  // \t\treader.readAsDataURL(e.target.files[0]);\n  // \t}\n  // };\n  // const onLoad = useCallback((img) => {\n  // \timgRef.current = img;\n  // }, []);\n  // useEffect(() => {\n  // \tif (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n  // \t\treturn;\n  // \t}\n  // \tconst image = imgRef.current;\n  // \tconst canvas = previewCanvasRef.current;\n  // \tconst crop = completedCrop;\n  // \tconst scaleX = image.naturalWidth / image.width;\n  // \tconst scaleY = image.naturalHeight / image.height;\n  // \tconst ctx = canvas.getContext('2d');\n  // \tconst pixelRatio = window.devicePixelRatio;\n  // \tcanvas.width = crop.width * pixelRatio;\n  // \tcanvas.height = crop.height * pixelRatio;\n  // \tctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n  // \tctx.imageSmoothingQuality = 'high';\n  // \tctx.drawImage(\n  // \t\timage,\n  // \t\tcrop.x * scaleX,\n  // \t\tcrop.y * scaleY,\n  // \t\tcrop.width * scaleX,\n  // \t\tcrop.height * scaleY,\n  // \t\t0,\n  // \t\t0,\n  // \t\tcrop.width,\n  // \t\tcrop.height\n  // \t);\n  // }, [completedCrop]);\n  // return (\n  // \t<div className=\"App\">\n  // \t\t<div>\n  // \t\t\t<input type=\"file\" accept=\"image/*\" onChange={onSelectFile} />\n  // \t\t</div>\n  // \t\t<ReactCrop\n  // \t\t\tsrc={upImg}\n  // \t\t\tonImageLoaded={onLoad}\n  // \t\t\tcrop={crop}\n  // \t\t\tonChange={(c) => setCrop(c)}\n  // \t\t\tonComplete={(c) => setCompletedCrop(c)}\n  // \t\t/>\n  // \t\t<div>\n  // \t\t\t<canvas\n  // \t\t\t\tref={previewCanvasRef}\n  // \t\t\t\t// Rounding is important so the canvas width and height matches/is a multiple for sharpness.\n  // \t\t\t\tstyle={{\n  // \t\t\t\t\twidth: Math.round(completedCrop?.width ?? 0),\n  // \t\t\t\t\theight: Math.round(completedCrop?.height ?? 0)\n  // \t\t\t\t}}\n  // \t\t\t/>\n  // \t\t</div>\n  // \t\t<p>\n  // \t\t\tNote that the download below won't work in this sandbox due to the iframe missing\n  // \t\t\t'allow-downloads'. It's just for your reference.\n  // \t\t</p>\n  // \t\t<button\n  // \t\t\ttype=\"button\"\n  // \t\t\tdisabled={!completedCrop?.width || !completedCrop?.height}\n  // \t\t\tonClick={() => generateDownload(previewCanvasRef.current, completedCrop)}\n  // \t\t>\n  // \t\t\tDownload cropped image\n  // \t\t</button>\n  // \t</div>\n  // );\n}\n\n_c = CropImage;\nexport default CropImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CropImage\");","map":{"version":3,"sources":["/Users/apple/Downloads/React-verification-system/client/src/pages/CropImage.js"],"names":["React","useState","useCallback","useRef","useEffect","ReactCrop","generateDownload","canvas","crop","toBlob","blob","previewUrl","window","URL","createObjectURL","anchor","document","createElement","download","href","click","revokeObjectURL","CropImage"],"mappings":"AAAA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,MAAvC,EAA+CC,SAA/C,QAAgE,OAAhE;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAO,qCAAP;;AAEA,SAASC,gBAAT,CAA0BC,MAA1B,EAAkCC,IAAlC,EAAwC;AACvC,MAAI,CAACA,IAAD,IAAS,CAACD,MAAd,EAAsB;AACrB;AACA;;AAEDA,EAAAA,MAAM,CAACE,MAAP,CACEC,IAAD,IAAU;AACT,UAAMC,UAAU,GAAGC,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2BJ,IAA3B,CAAnB;AAEA,UAAMK,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAf;AACAF,IAAAA,MAAM,CAACG,QAAP,GAAkB,iBAAlB;AACAH,IAAAA,MAAM,CAACI,IAAP,GAAcN,GAAG,CAACC,eAAJ,CAAoBJ,IAApB,CAAd;AACAK,IAAAA,MAAM,CAACK,KAAP;AAEAR,IAAAA,MAAM,CAACC,GAAP,CAAWQ,eAAX,CAA2BV,UAA3B;AACA,GAVF,EAWC,WAXD,EAYC,CAZD;AAcA;;AAED,SAASW,SAAT,GAAqB,CACpB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;KA1FQA,S;AA4FT,eAAeA,SAAf","sourcesContent":["/** @format */\n\nimport React, { useState, useCallback, useRef, useEffect } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nfunction generateDownload(canvas, crop) {\n\tif (!crop || !canvas) {\n\t\treturn;\n\t}\n\n\tcanvas.toBlob(\n\t\t(blob) => {\n\t\t\tconst previewUrl = window.URL.createObjectURL(blob);\n\n\t\t\tconst anchor = document.createElement('a');\n\t\t\tanchor.download = 'cropPreview.png';\n\t\t\tanchor.href = URL.createObjectURL(blob);\n\t\t\tanchor.click();\n\n\t\t\twindow.URL.revokeObjectURL(previewUrl);\n\t\t},\n\t\t'image/png',\n\t\t1\n\t);\n}\n\nfunction CropImage() {\n\t// const [upImg, setUpImg] = useState();\n\t// const imgRef = useRef(null);\n\t// const previewCanvasRef = useRef(null);\n\t// const [crop, setCrop] = useState({ unit: '%', width: 30, aspect: 16 / 9 });\n\t// const [completedCrop, setCompletedCrop] = useState(null);\n\n\t// const onSelectFile = (e) => {\n\t// \tif (e.target.files && e.target.files.length > 0) {\n\t// \t\tconst reader = new FileReader();\n\t// \t\treader.addEventListener('load', () => setUpImg(reader.result));\n\t// \t\treader.readAsDataURL(e.target.files[0]);\n\t// \t}\n\t// };\n\n\t// const onLoad = useCallback((img) => {\n\t// \timgRef.current = img;\n\t// }, []);\n\n\t// useEffect(() => {\n\t// \tif (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n\t// \t\treturn;\n\t// \t}\n\n\t// \tconst image = imgRef.current;\n\t// \tconst canvas = previewCanvasRef.current;\n\t// \tconst crop = completedCrop;\n\n\t// \tconst scaleX = image.naturalWidth / image.width;\n\t// \tconst scaleY = image.naturalHeight / image.height;\n\t// \tconst ctx = canvas.getContext('2d');\n\t// \tconst pixelRatio = window.devicePixelRatio;\n\n\t// \tcanvas.width = crop.width * pixelRatio;\n\t// \tcanvas.height = crop.height * pixelRatio;\n\n\t// \tctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n\t// \tctx.imageSmoothingQuality = 'high';\n\n\t// \tctx.drawImage(\n\t// \t\timage,\n\t// \t\tcrop.x * scaleX,\n\t// \t\tcrop.y * scaleY,\n\t// \t\tcrop.width * scaleX,\n\t// \t\tcrop.height * scaleY,\n\t// \t\t0,\n\t// \t\t0,\n\t// \t\tcrop.width,\n\t// \t\tcrop.height\n\t// \t);\n\t// }, [completedCrop]);\n\n\t// return (\n\t// \t<div className=\"App\">\n\t// \t\t<div>\n\t// \t\t\t<input type=\"file\" accept=\"image/*\" onChange={onSelectFile} />\n\t// \t\t</div>\n\t// \t\t<ReactCrop\n\t// \t\t\tsrc={upImg}\n\t// \t\t\tonImageLoaded={onLoad}\n\t// \t\t\tcrop={crop}\n\t// \t\t\tonChange={(c) => setCrop(c)}\n\t// \t\t\tonComplete={(c) => setCompletedCrop(c)}\n\t// \t\t/>\n\t// \t\t<div>\n\t// \t\t\t<canvas\n\t// \t\t\t\tref={previewCanvasRef}\n\t// \t\t\t\t// Rounding is important so the canvas width and height matches/is a multiple for sharpness.\n\t// \t\t\t\tstyle={{\n\t// \t\t\t\t\twidth: Math.round(completedCrop?.width ?? 0),\n\t// \t\t\t\t\theight: Math.round(completedCrop?.height ?? 0)\n\t// \t\t\t\t}}\n\t// \t\t\t/>\n\t// \t\t</div>\n\t// \t\t<p>\n\t// \t\t\tNote that the download below won't work in this sandbox due to the iframe missing\n\t// \t\t\t'allow-downloads'. It's just for your reference.\n\t// \t\t</p>\n\t// \t\t<button\n\t// \t\t\ttype=\"button\"\n\t// \t\t\tdisabled={!completedCrop?.width || !completedCrop?.height}\n\t// \t\t\tonClick={() => generateDownload(previewCanvasRef.current, completedCrop)}\n\t// \t\t>\n\t// \t\t\tDownload cropped image\n\t// \t\t</button>\n\t// \t</div>\n\t// );\n\n\n\t\n}\n\nexport default CropImage"]},"metadata":{},"sourceType":"module"}