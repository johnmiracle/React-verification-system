{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/apple/Downloads/React-verification-system/client/src/pages/PicUploadNoCrop.js\";\n\n/** @format */\nimport React, { Component } from 'react'; // import { Form } from 'semantic-ui-react';\n\nimport { connect } from 'react-redux';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\n\nclass PicUploadNoCrop extends Component {\n  constructor() {\n    super();\n\n    this.handleFile = e => {\n      const fileReader = new FileReader();\n\n      fileReader.onloadend = () => {\n        this.setState({\n          src: fileReader.result\n        });\n      };\n\n      fileReader.readAsDataURL(e.target.files[0]);\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const user = this.props.currentUser;\n      const formData = new FormData();\n      formData.append('user[id]', user.id);\n      formData.append('user[profile_pic]', this.state.croppedImage); // addPhotoToUser(user, formData);\n    };\n\n    this.onImageLoaded = image => {\n      this.imageRef = image;\n    };\n\n    this.onCropChange = crop => {\n      this.setState({\n        crop\n      });\n    };\n\n    this.onCropComplete = crop => {\n      if (this.imageRef && crop.width && crop.height) {\n        const croppedImageUrl = this.getCroppedImg(this.imageRef, crop);\n        this.setState({\n          croppedImageUrl\n        });\n      }\n    };\n\n    this.state = {\n      src: null,\n      crop: {\n        unit: '%',\n        width: 30,\n        aspect: 1 / 1\n      },\n      croppedImageUrl: null\n    };\n  }\n\n  getCroppedImg(image, crop) {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    const reader = new FileReader();\n    canvas.toBlob(blob => {\n      reader.readAsDataURL(blob);\n\n      reader.onloadend = () => {\n        this.dataURLtoFile(reader.result, 'cropped.jpg');\n      };\n    });\n  }\n\n  dataURLtoFile(dataurl, filename) {\n    let arr = dataurl.split(','),\n        mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]),\n        n = bstr.length,\n        u8arr = new Uint8Array(n);\n\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n    }\n\n    let croppedImage = new File([u8arr], filename, {\n      type: mime\n    });\n    this.setState({\n      croppedImage: croppedImage\n    });\n  }\n\n  render() {\n    const {\n      crop,\n      profile_pic,\n      src\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"profile_pic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"profile_pic\",\n        value: profile_pic,\n        onChange: this.handleFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 5\n      }, this), src && /*#__PURE__*/_jsxDEV(Dialog, {\n        open: true,\n        \"aria-labelledby\": \"form-dialog-title\",\n        children: /*#__PURE__*/_jsxDEV(DialogContent, {\n          children: /*#__PURE__*/_jsxDEV(ReactCrop, {\n            src: src,\n            crop: crop,\n            onImageLoaded: this.onImageLoaded,\n            onComplete: this.onCropComplete,\n            onChange: this.onCropChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nconst mapSTP = state => {\n  return {\n    currentUser: state.currentUser\n  };\n};\n\nexport default connect(mapSTP)(PicUploadNoCrop);","map":{"version":3,"sources":["/Users/apple/Downloads/React-verification-system/client/src/pages/PicUploadNoCrop.js"],"names":["React","Component","connect","ReactCrop","Dialog","DialogContent","PicUploadNoCrop","constructor","handleFile","e","fileReader","FileReader","onloadend","setState","src","result","readAsDataURL","target","files","handleSubmit","preventDefault","user","props","currentUser","formData","FormData","append","id","state","croppedImage","onImageLoaded","image","imageRef","onCropChange","crop","onCropComplete","width","height","croppedImageUrl","getCroppedImg","unit","aspect","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","reader","toBlob","blob","dataURLtoFile","dataurl","filename","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","File","type","render","profile_pic","mapSTP"],"mappings":"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","sourcesContent":["/** @format */\n\nimport React, { Component } from 'react';\n// import { Form } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\n\nclass PicUploadNoCrop extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tsrc: null,\n\t\t\tcrop: {\n\t\t\t\tunit: '%',\n\t\t\t\twidth: 30,\n\t\t\t\taspect: 1 / 1\n\t\t\t},\n\t\t\tcroppedImageUrl: null\n\t\t};\n\t}\n\n\thandleFile = (e) => {\n\t\tconst fileReader = new FileReader();\n\t\tfileReader.onloadend = () => {\n\t\t\tthis.setState({ src: fileReader.result });\n\t\t};\n\t\tfileReader.readAsDataURL(e.target.files[0]);\n\t};\n\n\thandleSubmit = (e) => {\n\t\te.preventDefault();\n\t\tconst user = this.props.currentUser;\n\t\tconst formData = new FormData();\n\n\t\tformData.append('user[id]', user.id);\n\t\tformData.append('user[profile_pic]', this.state.croppedImage);\n\n\t\t// addPhotoToUser(user, formData);\n\t};\n\n\tonImageLoaded = (image) => {\n\t\tthis.imageRef = image;\n\t};\n\n\tonCropChange = (crop) => {\n\t\tthis.setState({ crop });\n\t};\n\n\tonCropComplete = (crop) => {\n\t\tif (this.imageRef && crop.width && crop.height) {\n\t\t\tconst croppedImageUrl = this.getCroppedImg(this.imageRef, crop);\n\t\t\tthis.setState({ croppedImageUrl });\n\t\t}\n\t};\n\n\tgetCroppedImg(image, crop) {\n\t\tconst canvas = document.createElement('canvas');\n\t\tconst scaleX = image.naturalWidth / image.width;\n\t\tconst scaleY = image.naturalHeight / image.height;\n\t\tcanvas.width = crop.width;\n\t\tcanvas.height = crop.height;\n\t\tconst ctx = canvas.getContext('2d');\n\n\t\tctx.drawImage(\n\t\t\timage,\n\t\t\tcrop.x * scaleX,\n\t\t\tcrop.y * scaleY,\n\t\t\tcrop.width * scaleX,\n\t\t\tcrop.height * scaleY,\n\t\t\t0,\n\t\t\t0,\n\t\t\tcrop.width,\n\t\t\tcrop.height\n\t\t);\n\n\t\tconst reader = new FileReader();\n\t\tcanvas.toBlob((blob) => {\n\t\t\treader.readAsDataURL(blob);\n\t\t\treader.onloadend = () => {\n\t\t\t\tthis.dataURLtoFile(reader.result, 'cropped.jpg');\n\t\t\t};\n\t\t});\n\t}\n\n\tdataURLtoFile(dataurl, filename) {\n\t\tlet arr = dataurl.split(','),\n\t\t\tmime = arr[0].match(/:(.*?);/)[1],\n\t\t\tbstr = atob(arr[1]),\n\t\t\tn = bstr.length,\n\t\t\tu8arr = new Uint8Array(n);\n\n\t\twhile (n--) {\n\t\t\tu8arr[n] = bstr.charCodeAt(n);\n\t\t}\n\t\tlet croppedImage = new File([u8arr], filename, { type: mime });\n\t\tthis.setState({ croppedImage: croppedImage });\n\t}\n\trender() {\n\t\tconst { crop, profile_pic, src } = this.state;\n\n\t\treturn (\n\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t<label htmlFor=\"profile_pic\"></label>\n\t\t\t\t<input type=\"file\" id=\"profile_pic\" value={profile_pic} onChange={this.handleFile} />\n\n\t\t\t\t{src && (\n\t\t\t\t\t<Dialog open aria-labelledby=\"form-dialog-title\">\n\t\t\t\t\t\t<DialogContent>\n\t\t\t\t\t\t\t<ReactCrop\n\t\t\t\t\t\t\t\tsrc={src}\n\t\t\t\t\t\t\t\tcrop={crop}\n\t\t\t\t\t\t\t\tonImageLoaded={this.onImageLoaded}\n\t\t\t\t\t\t\t\tonComplete={this.onCropComplete}\n\t\t\t\t\t\t\t\tonChange={this.onCropChange}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</DialogContent>\n\t\t\t\t\t</Dialog>\n\t\t\t\t)}\n\n\t\t\t\t<button>save</button>\n\t\t\t</form>\n\t\t);\n\t}\n}\n\nconst mapSTP = (state) => {\n\treturn { currentUser: state.currentUser };\n};\n\nexport default connect(mapSTP)(PicUploadNoCrop);\n"]},"metadata":{},"sourceType":"module"}