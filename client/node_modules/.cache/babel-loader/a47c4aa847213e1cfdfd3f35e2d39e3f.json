{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/apple/Downloads/React-verification-system/client/src/pages/CropImage.js\",\n    _s = $RefreshSig$();\n\n/** @format */\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nfunction generateDownload(canvas, crop) {\n  if (!crop || !canvas) {\n    return;\n  }\n\n  canvas.toBlob(blob => {\n    const previewUrl = window.URL.createObjectURL(blob);\n    const anchor = document.createElement('a');\n    anchor.download = 'cropPreview.png';\n    anchor.href = URL.createObjectURL(blob);\n    anchor.click();\n    window.URL.revokeObjectURL(previewUrl);\n  }, 'image/png', 1);\n  console.log(previewUrl);\n}\n\nfunction CropDemo({\n  src\n}) {\n  _s();\n\n  const [upImg, setUpImg] = useState();\n  const imgRef = useRef(null);\n  const previewCanvasRef = useRef(null);\n  const [crop, setCrop] = useState({\n    unit: '%',\n    width: 30,\n    aspect: 16 / 9\n  });\n  const [completedCrop, setCompletedCrop] = useState(null);\n\n  const onSelectFile = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () => setUpImg(reader.result));\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  const onLoad = useCallback(img => {\n    imgRef.current = img;\n  }, []);\n  useEffect(() => {\n    if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n      return;\n    }\n\n    const image = imgRef.current;\n    const canvas = previewCanvasRef.current;\n    const crop = completedCrop;\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    const ctx = canvas.getContext('2d');\n    const pixelRatio = window.devicePixelRatio;\n    canvas.width = crop.width * pixelRatio;\n    canvas.height = crop.height * pixelRatio;\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingQuality = 'high';\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n  }, [completedCrop]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: onSelectFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(ReactCrop, {\n      src: upImg,\n      crop: crop,\n      onChange: newCrop => setCrop(newCrop),\n      onImageLoaded: onLoad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"\",\n      alt: true,\n      src: completedCrop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CropDemo, \"nyNsYj31u3EdJX9/X93LyWDPNls=\");\n\n_c = CropDemo;\nexport default CropDemo;\n\nvar _c;\n\n$RefreshReg$(_c, \"CropDemo\");","map":{"version":3,"sources":["/Users/apple/Downloads/React-verification-system/client/src/pages/CropImage.js"],"names":["React","useCallback","useEffect","useRef","useState","ReactCrop","generateDownload","canvas","crop","toBlob","blob","previewUrl","window","URL","createObjectURL","anchor","document","createElement","download","href","click","revokeObjectURL","console","log","CropDemo","src","upImg","setUpImg","imgRef","previewCanvasRef","setCrop","unit","width","aspect","completedCrop","setCompletedCrop","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL","onLoad","img","current","image","scaleX","naturalWidth","scaleY","naturalHeight","height","ctx","getContext","pixelRatio","devicePixelRatio","setTransform","imageSmoothingQuality","drawImage","x","y","newCrop"],"mappings":"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","sourcesContent":["/** @format */\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nfunction generateDownload(canvas, crop) {\n\tif (!crop || !canvas) {\n\t\treturn;\n\t}\n\n\tcanvas.toBlob(\n\t\t(blob) => {\n\t\t\tconst previewUrl = window.URL.createObjectURL(blob);\n\n\t\t\tconst anchor = document.createElement('a');\n\t\t\tanchor.download = 'cropPreview.png';\n\t\t\tanchor.href = URL.createObjectURL(blob);\n\t\t\tanchor.click();\n\n\t\t\twindow.URL.revokeObjectURL(previewUrl);\n\t\t},\n\t\t'image/png',\n\t\t1\n\t);\n\tconsole.log(previewUrl);\n}\n\nfunction CropDemo({ src }) {\n\tconst [upImg, setUpImg] = useState();\n\tconst imgRef = useRef(null);\n\tconst previewCanvasRef = useRef(null);\n\tconst [crop, setCrop] = useState({ unit: '%', width: 30, aspect: 16 / 9 });\n\tconst [completedCrop, setCompletedCrop] = useState(null);\n\n\tconst onSelectFile = (e) => {\n\t\tif (e.target.files && e.target.files.length > 0) {\n\t\t\tconst reader = new FileReader();\n\t\t\treader.addEventListener('load', () => setUpImg(reader.result));\n\t\t\treader.readAsDataURL(e.target.files[0]);\n\t\t}\n\t};\n\n\tconst onLoad = useCallback((img) => {\n\t\timgRef.current = img;\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst image = imgRef.current;\n\t\tconst canvas = previewCanvasRef.current;\n\t\tconst crop = completedCrop;\n\n\t\tconst scaleX = image.naturalWidth / image.width;\n\t\tconst scaleY = image.naturalHeight / image.height;\n\t\tconst ctx = canvas.getContext('2d');\n\t\tconst pixelRatio = window.devicePixelRatio;\n\n\t\tcanvas.width = crop.width * pixelRatio;\n\t\tcanvas.height = crop.height * pixelRatio;\n\n\t\tctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n\t\tctx.imageSmoothingQuality = 'high';\n\n\t\tctx.drawImage(\n\t\t\timage,\n\t\t\tcrop.x * scaleX,\n\t\t\tcrop.y * scaleY,\n\t\t\tcrop.width * scaleX,\n\t\t\tcrop.height * scaleY,\n\t\t\t0,\n\t\t\t0,\n\t\t\tcrop.width,\n\t\t\tcrop.height\n\t\t);\n\t}, [completedCrop]);\n\n\treturn (\n\t\t<>\n\t\t\t<input type=\"file\" accept=\"image/*\" onChange={onSelectFile} />\n\t\t\t<ReactCrop\n\t\t\t\tsrc={upImg}\n\t\t\t\tcrop={crop}\n\t\t\t\tonChange={(newCrop) => setCrop(newCrop)}\n\t\t\t\tonImageLoaded={onLoad}\n\t\t\t/>\n\t\t\t<img className=\"\" alt src={completedCrop}></img>\n\t\t</>\n\t);\n}\n\nexport default CropDemo;\n"]},"metadata":{},"sourceType":"module"}