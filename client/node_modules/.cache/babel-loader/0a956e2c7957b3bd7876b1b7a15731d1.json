{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/apple/Downloads/React-verification-system/client/src/pages/CropImage.js\",\n    _s = $RefreshSig$();\n\n/** @format */\nimport { Button, Dialog, DialogActions } from '@material-ui/core';\nimport React, { useState, useCallback, useRef, useEffect } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nfunction CropImage() {\n  _s();\n\n  const [open, setOpen] = useState(true);\n  const [upImg, setUpImg] = useState();\n  const imgRef = useRef(null);\n  const previewCanvasRef = useRef(null);\n  const [crop, setCrop] = useState({\n    unit: '%',\n    width: 30,\n    aspect: 16 / 9\n  });\n  const [completedCrop, setCompletedCrop] = useState(null);\n\n  const onSelectFile = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () => setUpImg(reader.result));\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  const onLoad = useCallback(img => {\n    imgRef.current = img;\n  }, []);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n      return;\n    }\n\n    const image = imgRef.current;\n    const canvas = previewCanvasRef.current;\n    const crop = completedCrop;\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    const ctx = canvas.getContext('2d');\n    const pixelRatio = window.devicePixelRatio;\n    canvas.width = crop.width * pixelRatio;\n    canvas.height = crop.height * pixelRatio;\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingQuality = 'high';\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n  }, [completedCrop]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: onSelectFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }, this), upImg ? /*#__PURE__*/_jsxDEV(Dialog, {\n        open: true,\n        onClose: handleClose,\n        \"aria-labelledby\": \"form-dialog-title\",\n        children: [/*#__PURE__*/_jsxDEV(ReactCrop, {\n          src: upImg,\n          onImageLoaded: onLoad,\n          crop: crop,\n          onChange: c => setCrop(c),\n          onComplete: c => setCompletedCrop(c)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleClose,\n            color: \"primary\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            onClick: onSelectFile,\n            color: \"primary\",\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 6\n      }, this) : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n}\n\n_s(CropImage, \"aoFouJD2mduJCScJTYUjelgMEuY=\");\n\n_c = CropImage;\nexport default CropImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CropImage\");","map":{"version":3,"sources":["/Users/apple/Downloads/React-verification-system/client/src/pages/CropImage.js"],"names":["Button","Dialog","DialogActions","React","useState","useCallback","useRef","useEffect","ReactCrop","CropImage","open","setOpen","upImg","setUpImg","imgRef","previewCanvasRef","crop","setCrop","unit","width","aspect","completedCrop","setCompletedCrop","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL","onLoad","img","current","handleClose","image","canvas","scaleX","naturalWidth","scaleY","naturalHeight","height","ctx","getContext","pixelRatio","window","devicePixelRatio","setTransform","imageSmoothingQuality","drawImage","x","y","handleSubmit","c"],"mappings":"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","sourcesContent":["/** @format */\n\nimport { Button, Dialog, DialogActions } from '@material-ui/core';\nimport React, { useState, useCallback, useRef, useEffect } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nfunction CropImage() {\n\tconst [open, setOpen] = useState(true);\n\tconst [upImg, setUpImg] = useState();\n\tconst imgRef = useRef(null);\n\tconst previewCanvasRef = useRef(null);\n\tconst [crop, setCrop] = useState({ unit: '%', width: 30, aspect: 16 / 9 });\n\tconst [completedCrop, setCompletedCrop] = useState(null);\n\n\tconst onSelectFile = (e) => {\n\t\tif (e.target.files && e.target.files.length > 0) {\n\t\t\tconst reader = new FileReader();\n\t\t\treader.addEventListener('load', () => setUpImg(reader.result));\n\t\t\treader.readAsDataURL(e.target.files[0]);\n\t\t}\n\t};\n\n\tconst onLoad = useCallback((img) => {\n\t\timgRef.current = img;\n\t}, []);\n\n\tconst handleClose = () => {\n\t\tsetOpen(false);\n\t};\n\n\tuseEffect(() => {\n\t\tif (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst image = imgRef.current;\n\t\tconst canvas = previewCanvasRef.current;\n\t\tconst crop = completedCrop;\n\n\t\tconst scaleX = image.naturalWidth / image.width;\n\t\tconst scaleY = image.naturalHeight / image.height;\n\t\tconst ctx = canvas.getContext('2d');\n\t\tconst pixelRatio = window.devicePixelRatio;\n\n\t\tcanvas.width = crop.width * pixelRatio;\n\t\tcanvas.height = crop.height * pixelRatio;\n\n\t\tctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n\t\tctx.imageSmoothingQuality = 'high';\n\n\t\tctx.drawImage(\n\t\t\timage,\n\t\t\tcrop.x * scaleX,\n\t\t\tcrop.y * scaleY,\n\t\t\tcrop.width * scaleX,\n\t\t\tcrop.height * scaleY,\n\t\t\t0,\n\t\t\t0,\n\t\t\tcrop.width,\n\t\t\tcrop.height\n\t\t);\n\t}, [completedCrop]);\n\n\treturn (\n\t\t<>\n\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t<input type=\"file\" accept=\"image/*\" onChange={onSelectFile} />\n\n\t\t\t\t{upImg ? (\n\t\t\t\t\t<Dialog open onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n\t\t\t\t\t\t<ReactCrop\n\t\t\t\t\t\t\tsrc={upImg}\n\t\t\t\t\t\t\tonImageLoaded={onLoad}\n\t\t\t\t\t\t\tcrop={crop}\n\t\t\t\t\t\t\tonChange={(c) => setCrop(c)}\n\t\t\t\t\t\t\tonComplete={(c) => setCompletedCrop(c)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t\t<Button onClick={handleClose} color=\"primary\">\n\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button type=\"submit\" onClick={onSelectFile} color=\"primary\">\n\t\t\t\t\t\t\t\tUpdate\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</DialogActions>\n\t\t\t\t\t</Dialog>\n\t\t\t\t) : (\n\t\t\t\t\t''\n\t\t\t\t)}\n\t\t\t</form>\n\n\t\t\t{/* <div>\n        <canvas\n          ref={previewCanvasRef}\n          // Rounding is important so the canvas width and height matches/is a multiple for sharpness.\n          style={{\n            width: Math.round(completedCrop?.width ?? 0),\n            height: Math.round(completedCrop?.height ?? 0)\n          }}\n        />\n      </div> */}\n\t\t\t{/* <p>\n\t\t\t\tNote that the download below won't work in this sandbox due to the iframe missing\n\t\t\t\t'allow-downloads'. It's just for your reference.\n\t\t\t</p>\n\t\t\t<button\n\t\t\t\ttype=\"button\"\n\t\t\t\tdisabled={!completedCrop?.width || !completedCrop?.height}\n\t\t\t\tonClick={() => generateDownload(previewCanvasRef.current, completedCrop)}\n\t\t\t>\n\t\t\t\tDownload cropped image\n\t\t\t</button> */}\n\t\t</>\n\t);\n}\nexport default CropImage;\n"]},"metadata":{},"sourceType":"module"}