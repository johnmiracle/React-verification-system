{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/apple/Downloads/React-verification-system/client/src/pages/CropDemo.js\",\n    _s = $RefreshSig$();\n\n/** @format */\nimport React, { useState, PureComponent } from 'react';\nimport ReactCrop from 'react-image-crop';\n\nfunction CropDemo({\n  src\n}) {\n  _s();\n\n  const [crop, setCrop] = useState({\n    aspect: 16 / 9\n  });\n  return /*#__PURE__*/_jsxDEV(ReactCrop, {\n    src: src,\n    crop: crop,\n    onChange: newCrop => setCrop(newCrop)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CropDemo, \"1LMFXjC3f2rCS/h3a26ZsgF8NZU=\");\n\n_c = CropDemo;\nimport './App.css';\n\nclass App extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      src: null,\n      crop: {\n        unit: '%',\n        width: 30,\n        aspect: 16 / 9\n      }\n    };\n\n    this.onSelectFile = e => {\n      if (e.target.files && e.target.files.length > 0) {\n        const reader = new FileReader();\n        reader.addEventListener('load', () => this.setState({\n          src: reader.result\n        }));\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    };\n\n    this.onImageLoaded = image => {\n      this.imageRef = image;\n    };\n\n    this.onCropComplete = crop => {\n      this.makeClientCrop(crop);\n    };\n\n    this.onCropChange = (crop, percentCrop) => {\n      // You could also use percentCrop:\n      // this.setState({ crop: percentCrop });\n      this.setState({\n        crop\n      });\n    };\n  }\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(this.imageRef, crop, 'newFile.jpeg');\n      this.setState({\n        croppedImageUrl\n      });\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error('Canvas is empty');\n          return;\n        }\n\n        blob.name = fileName;\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, 'image/jpeg');\n    });\n  }\n\n  render() {\n    const {\n      crop,\n      croppedImageUrl,\n      src\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \"image/*\",\n          onChange: this.onSelectFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }, this), src && /*#__PURE__*/_jsxDEV(ReactCrop, {\n        src: src,\n        crop: crop,\n        ruleOfThirds: true,\n        onImageLoaded: this.onImageLoaded,\n        onComplete: this.onCropComplete,\n        onChange: this.onCropChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 6\n      }, this), croppedImageUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"Crop\",\n        style: {\n          maxWidth: '100%'\n        },\n        src: croppedImageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default CropDemo;\n\nvar _c;\n\n$RefreshReg$(_c, \"CropDemo\");","map":{"version":3,"sources":["/Users/apple/Downloads/React-verification-system/client/src/pages/CropDemo.js"],"names":["React","useState","PureComponent","ReactCrop","CropDemo","src","crop","setCrop","aspect","newCrop","App","state","unit","width","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","setState","result","readAsDataURL","onImageLoaded","image","imageRef","onCropComplete","makeClientCrop","onCropChange","percentCrop","height","croppedImageUrl","getCroppedImg","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","console","error","name","window","URL","revokeObjectURL","fileUrl","createObjectURL","render","maxWidth"],"mappings":"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","sourcesContent":["/** @format */\n\nimport React, { useState, PureComponent } from 'react';\nimport ReactCrop from 'react-image-crop';\n\nfunction CropDemo({ src }) {\n\tconst [crop, setCrop] = useState({ aspect: 16 / 9 });\n\treturn <ReactCrop src={src} crop={crop} onChange={(newCrop) => setCrop(newCrop)} />;\n}\n\n\nimport './App.css';\n\nclass App extends PureComponent {\n\tstate = {\n\t\tsrc: null,\n\t\tcrop: {\n\t\t\tunit: '%',\n\t\t\twidth: 30,\n\t\t\taspect: 16 / 9\n\t\t}\n\t};\n\n\tonSelectFile = (e) => {\n\t\tif (e.target.files && e.target.files.length > 0) {\n\t\t\tconst reader = new FileReader();\n\t\t\treader.addEventListener('load', () => this.setState({ src: reader.result }));\n\t\t\treader.readAsDataURL(e.target.files[0]);\n\t\t}\n\t};\n\n\t// If you setState the crop in here you should return false.\n\tonImageLoaded = (image) => {\n\t\tthis.imageRef = image;\n\t};\n\n\tonCropComplete = (crop) => {\n\t\tthis.makeClientCrop(crop);\n\t};\n\n\tonCropChange = (crop, percentCrop) => {\n\t\t// You could also use percentCrop:\n\t\t// this.setState({ crop: percentCrop });\n\t\tthis.setState({ crop });\n\t};\n\n\tasync makeClientCrop(crop) {\n\t\tif (this.imageRef && crop.width && crop.height) {\n\t\t\tconst croppedImageUrl = await this.getCroppedImg(this.imageRef, crop, 'newFile.jpeg');\n\t\t\tthis.setState({ croppedImageUrl });\n\t\t}\n\t}\n\n\tgetCroppedImg(image, crop, fileName) {\n\t\tconst canvas = document.createElement('canvas');\n\t\tconst scaleX = image.naturalWidth / image.width;\n\t\tconst scaleY = image.naturalHeight / image.height;\n\t\tcanvas.width = crop.width;\n\t\tcanvas.height = crop.height;\n\t\tconst ctx = canvas.getContext('2d');\n\n\t\tctx.drawImage(\n\t\t\timage,\n\t\t\tcrop.x * scaleX,\n\t\t\tcrop.y * scaleY,\n\t\t\tcrop.width * scaleX,\n\t\t\tcrop.height * scaleY,\n\t\t\t0,\n\t\t\t0,\n\t\t\tcrop.width,\n\t\t\tcrop.height\n\t\t);\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tcanvas.toBlob((blob) => {\n\t\t\t\tif (!blob) {\n\t\t\t\t\t//reject(new Error('Canvas is empty'));\n\t\t\t\t\tconsole.error('Canvas is empty');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tblob.name = fileName;\n\t\t\t\twindow.URL.revokeObjectURL(this.fileUrl);\n\t\t\t\tthis.fileUrl = window.URL.createObjectURL(blob);\n\t\t\t\tresolve(this.fileUrl);\n\t\t\t}, 'image/jpeg');\n\t\t});\n\t}\n\n\trender() {\n\t\tconst { crop, croppedImageUrl, src } = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div>\n\t\t\t\t\t<input type=\"file\" accept=\"image/*\" onChange={this.onSelectFile} />\n\t\t\t\t</div>\n\t\t\t\t{src && (\n\t\t\t\t\t<ReactCrop\n\t\t\t\t\t\tsrc={src}\n\t\t\t\t\t\tcrop={crop}\n\t\t\t\t\t\truleOfThirds\n\t\t\t\t\t\tonImageLoaded={this.onImageLoaded}\n\t\t\t\t\t\tonComplete={this.onCropComplete}\n\t\t\t\t\t\tonChange={this.onCropChange}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{croppedImageUrl && <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} />}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default CropDemo;\n"]},"metadata":{},"sourceType":"module"}