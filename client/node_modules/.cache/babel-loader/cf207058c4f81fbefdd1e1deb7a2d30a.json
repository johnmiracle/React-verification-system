{"ast":null,"code":"/** @format */\nimport axios from 'axios';\nimport { USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS, USER_SIGNIN_FAIL, USER_SIGNOUT, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_HISTORY_REQUEST, USER_HISTORY_SUCCESS, USER_HISTORY_FAIL, USER_LOCATION_REQUEST, USER_LOCATION_SUCCESS, USER_LOCATION_FAIL, USER_ADDFARM_REQUEST, USER_ADDFARM_SUCCESS, USER_ADDFARM_FAIL, USER_FARMS_REQUEST, USER_FARMS_SUCCESS, USER_FARMS_FAIL } from '../constants/userConstants';\n\nconst signin = (phone, password) => async dispatch => {\n  dispatch({\n    type: USER_SIGNIN_REQUEST,\n    payload: {\n      phone,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await axios.post('/api/login', {\n      phone,\n      password\n    });\n    dispatch({\n      type: USER_SIGNIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_SIGNIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\nconst logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_SIGNOUT\n  });\n};\n\nconst register = (firstName, lastName, phone, password) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      firstName,\n      lastName,\n      phone,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await axios.post('/api/register', {\n      firstName,\n      lastName,\n      phone,\n      password\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\nconst location = (state, city, cluster) => async (dispatch, getState) => {\n  dispatch({\n    type: USER_LOCATION_REQUEST,\n    payload: {\n      state,\n      city,\n      cluster\n    }\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await axios.post('/api/location', {\n      state,\n      city,\n      cluster\n    }, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: USER_LOCATION_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_LOCATION_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\nconst newFarm = (farmType, poultryType, numOfStock, farmDays, farmDueDay, numOfDOC, numOfFeed, stockingDate, expectedPoints) => async (dispatch, getState) => {\n  dispatch({\n    type: USER_ADDFARM_REQUEST,\n    payload: {\n      farmType,\n      poultryType,\n      numOfStock,\n      farmDays,\n      farmDueDay,\n      numOfDOC,\n      numOfFeed,\n      stockingDate,\n      expectedPoints\n    }\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await axios.post('/api/user/add_farm', {\n      farmType,\n      poultryType,\n      numOfStock,\n      farmDays,\n      farmDueDay,\n      numOfDOC,\n      numOfFeed,\n      stockingDate,\n      expectedPoints\n    }, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: USER_ADDFARM_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_ADDFARM_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\nconst listHistoryMine = () => async (dispatch, getState) => {\n  dispatch({\n    type: USER_HISTORY_REQUEST\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await axios.get('/api/user/history', {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: USER_HISTORY_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_HISTORY_FAIL,\n      payload: message\n    });\n  }\n};\n\nconst listAllFarms = () => async (dispatch, getState) => {\n  dispatch({\n    type: USER_FARMS_REQUEST\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await axios.get('/api/user/all-farms', {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: USER_FARMS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_FARMS_FAIL,\n      payload: message\n    });\n  }\n};\n\nexport { signin, register, location, newFarm, logout, listHistoryMine, listAllFarms };","map":{"version":3,"sources":["/Users/apple/Downloads/React-verification-system/client/src/actions/userActions.js"],"names":["axios","USER_SIGNIN_REQUEST","USER_SIGNIN_SUCCESS","USER_SIGNIN_FAIL","USER_SIGNOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_HISTORY_REQUEST","USER_HISTORY_SUCCESS","USER_HISTORY_FAIL","USER_LOCATION_REQUEST","USER_LOCATION_SUCCESS","USER_LOCATION_FAIL","USER_ADDFARM_REQUEST","USER_ADDFARM_SUCCESS","USER_ADDFARM_FAIL","USER_FARMS_REQUEST","USER_FARMS_SUCCESS","USER_FARMS_FAIL","signin","phone","password","dispatch","type","payload","data","post","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","firstName","lastName","location","state","city","cluster","getState","userSignin","userInfo","headers","Authorization","token","newFarm","farmType","poultryType","numOfStock","farmDays","farmDueDay","numOfDOC","numOfFeed","stockingDate","expectedPoints","listHistoryMine","get","listAllFarms"],"mappings":"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","sourcesContent":["/** @format */\r\n\r\nimport axios from 'axios';\r\nimport {\r\n\tUSER_SIGNIN_REQUEST,\r\n\tUSER_SIGNIN_SUCCESS,\r\n\tUSER_SIGNIN_FAIL,\r\n\tUSER_SIGNOUT,\r\n\tUSER_REGISTER_REQUEST,\r\n\tUSER_REGISTER_SUCCESS,\r\n\tUSER_REGISTER_FAIL,\r\n\tUSER_HISTORY_REQUEST,\r\n\tUSER_HISTORY_SUCCESS,\r\n\tUSER_HISTORY_FAIL,\r\n\tUSER_LOCATION_REQUEST,\r\n\tUSER_LOCATION_SUCCESS,\r\n\tUSER_LOCATION_FAIL,\r\n\tUSER_ADDFARM_REQUEST,\r\n\tUSER_ADDFARM_SUCCESS,\r\n\tUSER_ADDFARM_FAIL,\r\n\tUSER_FARMS_REQUEST,\r\n\tUSER_FARMS_SUCCESS,\r\n\tUSER_FARMS_FAIL\r\n} from '../constants/userConstants';\r\n\r\nconst signin = (phone, password) => async (dispatch) => {\r\n\tdispatch({ type: USER_SIGNIN_REQUEST, payload: { phone, password } });\r\n\ttry {\r\n\t\tconst { data } = await axios.post('/api/login', { phone, password });\r\n\t\tdispatch({ type: USER_SIGNIN_SUCCESS, payload: data });\r\n\t\tlocalStorage.setItem('userInfo', JSON.stringify(data));\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_SIGNIN_FAIL,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nconst logout = () => (dispatch) => {\r\n\tlocalStorage.removeItem('userInfo');\r\n\tdispatch({ type: USER_SIGNOUT });\r\n};\r\n\r\nconst register = (firstName, lastName, phone, password) => async (dispatch) => {\r\n\tdispatch({\r\n\t\ttype: USER_REGISTER_REQUEST,\r\n\t\tpayload: { firstName, lastName, phone, password }\r\n\t});\r\n\ttry {\r\n\t\tconst { data } = await axios.post('/api/register', {\r\n\t\t\tfirstName,\r\n\t\t\tlastName,\r\n\t\t\tphone,\r\n\t\t\tpassword\r\n\t\t});\r\n\t\tdispatch({ type: USER_REGISTER_SUCCESS, payload: data });\r\n\t\tlocalStorage.setItem('userInfo', JSON.stringify(data));\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_REGISTER_FAIL,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nconst location = (state, city, cluster) => async (dispatch, getState) => {\r\n\tdispatch({\r\n\t\ttype: USER_LOCATION_REQUEST,\r\n\t\tpayload: { state, city, cluster }\r\n\t});\r\n\tconst {\r\n\t\tuserSignin: { userInfo }\r\n\t} = getState();\r\n\ttry {\r\n\t\tconst { data } = await axios.post(\r\n\t\t\t'/api/location',\r\n\t\t\t{\r\n\t\t\t\tstate,\r\n\t\t\t\tcity,\r\n\t\t\t\tcluster\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAuthorization: 'Bearer ' + userInfo.token\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\tdispatch({ type: USER_LOCATION_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_LOCATION_FAIL,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nconst newFarm = (\r\n\tfarmType,\r\n\tpoultryType,\r\n\tnumOfStock,\r\n\tfarmDays,\r\n\tfarmDueDay,\r\n\tnumOfDOC,\r\n\tnumOfFeed,\r\n\tstockingDate,\r\n\texpectedPoints\r\n) => async (dispatch, getState) => {\r\n\tdispatch({\r\n\t\ttype: USER_ADDFARM_REQUEST,\r\n\t\tpayload: {\r\n\t\t\tfarmType,\r\n\t\t\tpoultryType,\r\n\t\t\tnumOfStock,\r\n\t\t\tfarmDays,\r\n\t\t\tfarmDueDay,\r\n\t\t\tnumOfDOC,\r\n\t\t\tnumOfFeed,\r\n\t\t\tstockingDate,\r\n\t\t\texpectedPoints\r\n\t\t}\r\n\t});\r\n\tconst {\r\n\t\tuserSignin: { userInfo }\r\n\t} = getState();\r\n\ttry {\r\n\t\tconst { data } = await axios.post(\r\n\t\t\t'/api/user/add_farm',\r\n\t\t\t{\r\n\t\t\t\tfarmType,\r\n\t\t\t\tpoultryType,\r\n\t\t\t\tnumOfStock,\r\n\t\t\t\tfarmDays,\r\n\t\t\t\tfarmDueDay,\r\n\t\t\t\tnumOfDOC,\r\n\t\t\t\tnumOfFeed,\r\n\t\t\t\tstockingDate,\r\n\t\t\t\texpectedPoints\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAuthorization: 'Bearer ' + userInfo.token\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\tdispatch({ type: USER_ADDFARM_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_ADDFARM_FAIL,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message ? error.response.data.message : error.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nconst listHistoryMine = () => async (dispatch, getState) => {\r\n\tdispatch({ type: USER_HISTORY_REQUEST });\r\n\tconst {\r\n\t\tuserSignin: { userInfo }\r\n\t} = getState();\r\n\ttry {\r\n\t\tconst { data } = await axios.get('/api/user/history', {\r\n\t\t\theaders: { Authorization: `Bearer ${userInfo.token}` }\r\n\t\t});\r\n\t\tdispatch({ type: USER_HISTORY_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tconst message =\r\n\t\t\terror.response && error.response.data.message ? error.response.data.message : error.message;\r\n\t\tdispatch({ type: USER_HISTORY_FAIL, payload: message });\r\n\t}\r\n};\r\n\r\nconst listAllFarms = () => async (dispatch, getState) => {\r\n\tdispatch({ type: USER_FARMS_REQUEST });\r\n\tconst {\r\n\t\tuserSignin: { userInfo }\r\n\t} = getState();\r\n\ttry {\r\n\t\tconst { data } = await axios.get('/api/user/all-farms', {\r\n\t\t\theaders: { Authorization: `Bearer ${userInfo.token}` }\r\n\t\t});\r\n\t\tdispatch({ type: USER_FARMS_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tconst message =\r\n\t\t\terror.response && error.response.data.message ? error.response.data.message : error.message;\r\n\t\tdispatch({ type: USER_FARMS_FAIL, payload: message });\r\n\t}\r\n};\r\n\r\nexport { signin, register, location, newFarm, logout, listHistoryMine, listAllFarms };\r\n"]},"metadata":{},"sourceType":"module"}